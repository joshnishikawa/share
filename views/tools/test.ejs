<%- include('../head'); -%>

<style>
  .drag-handle {
    position: absolute;
    width: 10px;
    height: 10px;
    background-color: #0f0;
    left: 50%;
    bottom: 0px;
    cursor: e-resize;
  }

  .shape {
    border: 1px solid red;
  }

</style>

<div id="canvas" class="bg-med" style="height: 100vh;position:relative;">

  <div class="shape" data-shape="triangle" style="width:200px;position:absolute;top:50%;left:40%;border:solid cyan 1px;">
    <svg class="triangle-svg" width="100%" height="100%" viewBox="0 0 100 87" fill="none"
      xmlns="http://www.w3.org/2000/svg">
      <polygon points="50,0 100,86 0,86" fill="hotpink" stroke="black" stroke-width="1" />
    </svg>
    <div class="drag-handle"></div>
  </div>

</div>


<script>
$(function () {

  let currentAngle = 0;
  let currentHeight = 0;
  const shape = document.querySelector('.shape');
  const handle = document.querySelector('.drag-handle');

  handle.addEventListener('mousedown', startDrag);

  
  function startDrag(e) {
    e.preventDefault();
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDrag);

    const shapeBounds = shape.getBoundingClientRect();
    const shapeCenter = {
      x: shapeBounds.left + shapeBounds.width / 2,
      y: shapeBounds.top + shapeBounds.height / 2
    };
    const initialAngle = Math.atan2(e.clientX - shapeCenter.x, -(e.clientY - shapeCenter.y)) * (180 / Math.PI);

    function drag(e) {
      const startWidth = shape.clientWidth;

      const angle = Math.atan2(e.clientX - shapeCenter.x, -(e.clientY - shapeCenter.y)) * (180 / Math.PI);
      const newRotation = angle - initialAngle;

      const deltaX = e.clientX - shapeCenter.x;
      const deltaY = e.clientY - shapeCenter.y;
      currentHeight = 2 * Math.sqrt(deltaX * deltaX + deltaY * deltaY); // Twice the distance between the point of rotation and the cursor

      // Reset transform origin and apply new rotation and height
      shape.style.transformOrigin = 'center center';
      shape.style.transform = `rotate(${currentAngle + newRotation}deg)`;
      shape.style.height = `${currentHeight}px`;

      const svg = shape.querySelector('svg');
      const polygon = svg.querySelector('polygon');

      svg.setAttribute('viewBox', `0 0 ${startWidth} ${currentHeight}`);
      shape.setAttribute('height', currentHeight);

      if (shape.getAttribute("data-shape") === "triangle") {
        polygon.setAttribute('points', `${startWidth / 2},0 ${startWidth},${currentHeight} 0,${currentHeight}`); // For triangle
      } else if (shape.getAttribute("data-shape") === "diamond") {
        polygon.setAttribute('points', `${startWidth / 2},0 ${startWidth},${currentHeight / 2} ${startWidth / 2},${currentHeight} 0,${currentHeight / 2}`); // For diamond
      } else {
        polygon.setAttribute('points', `0,0 ${startWidth},0 ${startWidth},${currentHeight} 0,${currentHeight}`);
      }

      // Update drag handle position
      handle.style.bottom = `0px`;

      // Adjust shape position
      const newTop = shapeCenter.y - currentHeight / 2;
      shape.style.top = `${newTop}px`;
    }

    function stopDrag() {
      document.removeEventListener('mousemove', drag);
      document.removeEventListener('mouseup', stopDrag);
      
      // Update current angle
      const matrix = new DOMMatrix(getComputedStyle(shape).transform);
      currentAngle = Math.atan2(matrix.b, matrix.a) * (180 / Math.PI);
    }
  }

  document.addEventListener('contextmenu', function (e) {
    e.preventDefault();
  });

});
</script>

<%- include('../foot'); -%>