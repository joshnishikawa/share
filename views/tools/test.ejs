<%- include('../head'); -%>

<style>
  .drag-handle {
    position: absolute;
    width: 10px;
    height: 10px;
    background-color: #0f0;
    left: 50%;
    bottom: 0px;
    cursor: e-resize;
  }

  .shape {
    border: 1px solid red;
  }

  .transform-origin-dot {
    position: absolute;
    width: 5px;
    height: 5px;
    background-color: red;
    border-radius: 50%;
    pointer-events: none;
  }
</style>

<div id="canvas" class="bg-med" style="height: 100vh;position:relative;">

  <div class="shape" data-shape="triangle" style="width:200px;position:absolute;top:50%;left:40%;border:solid cyan 1px;">
    <svg class="triangle-svg" width="100%" height="100%" viewBox="0 0 100 87" fill="none"
      xmlns="http://www.w3.org/2000/svg">
      <polygon points="50,0 100,86 0,86" fill="hotpink" stroke="black" stroke-width="1" />
    </svg>
    <div class="drag-handle"></div>
  </div>

</div>


<script>
$(function () {
  function matrixToDegrees(matrixString) {
    if (matrixString === 'none') return 0;
    const values = matrixString.match(/matrix\(([^)]+)\)/)[1].split(', ');
    const a = parseFloat(values[0]); // Corresponds to cos(θ)
    const b = parseFloat(values[1]); // Corresponds to sin(θ)
    const radians = Math.atan2(b, a); // Extract the angle in radians
    const degrees = radians * (180 / Math.PI); // Convert to degrees
    return degrees;
  }

  let currentAngle = 0;
  const shape = document.querySelector('.shape');
  const handle = document.querySelector('.drag-handle');

  handle.addEventListener('mousedown', startDrag);

  function startDrag(e) {
    e.preventDefault();
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDrag);

    const shapeBounds = shape.getBoundingClientRect();
    const shapeCenter = {
      x: shapeBounds.left + shapeBounds.width / 2,
      y: shapeBounds.top
    };

    const initialAngle = Math.atan2(e.clientX - shapeCenter.x, -(e.clientY - shapeCenter.y)) * (180 / Math.PI);

    function drag(e) {
      const angle = Math.atan2(e.clientX - shapeCenter.x, -(e.clientY - shapeCenter.y)) * (180 / Math.PI);
      const newRotation = angle - initialAngle;

      const deltaX = e.clientX - shapeCenter.x;
      const deltaY = e.clientY - shapeCenter.y;
      const newHeight = Math.sqrt(deltaX * deltaX + deltaY * deltaY); // Distance between the point of rotation and the cursor

      // Reset transform origin and apply new rotation and height
      shape.style.transformOrigin = 'top center';
      shape.style.transform = `rotate(${currentAngle + newRotation}deg)`;
      shape.style.height = `${newHeight}px`;

      const svg = shape.querySelector('svg');
      const polygon = svg.querySelector('polygon');
      svg.setAttribute('viewBox', `0 0 ${shapeBounds.width} ${newHeight}`);
      polygon.setAttribute('points', `${shapeBounds.width / 2},0 ${shapeBounds.width},${newHeight} 0,${newHeight}`);

      // Update drag handle position
      handle.style.bottom = `0px`;
    }

    function stopDrag() {
      document.removeEventListener('mousemove', drag);
      document.removeEventListener('mouseup', stopDrag);
      
      // Update current angle
      const matrix = new DOMMatrix(getComputedStyle(shape).transform);
      currentAngle = Math.atan2(matrix.b, matrix.a) * (180 / Math.PI);
    }
  }

  document.addEventListener('contextmenu', function (e) {
    e.preventDefault();
  });

});
</script>

<%- include('../foot'); -%>