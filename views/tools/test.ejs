<%- include('../head'); -%>

<style>
  .drag-handle {
    position: absolute;
    width: 10px;
    height: 10px;
    background-color: #0f0;
    left: 50%;
    bottom: 0px;
    cursor: e-resize;
  }

  .shape {
    border: 1px solid red;
  }
</style>

<div id="canvas" class="bg-med" style="height: 100vh;position:relative;">

  <div class="canvas-shape" data-shape="triangle" style="width:200px;position:absolute;top:50%;left:40%;border:solid cyan 1px;">
    <svg class="triangle-svg" width="100%" height="100%" viewBox="0 0 100 87" fill="none"
      xmlns="http://www.w3.org/2000/svg">
      <polygon points="50,0 100,86 0,86" fill="hotpink" stroke="black" stroke-width="1" />
    </svg>
    <div class="drag-handle"></div>
  </div>

</div>


<script>
$(function () {
  function matrixToDegrees(matrixString) {
    if (matrixString === 'none') return 0;
    const values = matrixString.match(/matrix\(([^)]+)\)/)[1].split(', ');
    const a = parseFloat(values[0]); // Corresponds to cos(θ)
    const b = parseFloat(values[1]); // Corresponds to sin(θ)
    const radians = Math.atan2(b, a); // Extract the angle in radians
    const degrees = radians * (180 / Math.PI); // Convert to degrees
    return degrees;
  }

  function touchToDegrees(initial, current) {
    let delta = current - initial;
    let degrees = (delta + 180) % 360 - 180;   // Normalize to [-180, 180] range
    return degrees;
  }


  $(document).on("mousedown touchstart", ".drag-handle", function (e) {
    var item = $(this).closest(".canvas-shape");
    var svg = item.find('svg');
    var shape = svg.find('rect, polygon');
    var startWidth = item.width();
    var startTop = item.offset().top;
    var startLeft = item.offset().left + startWidth / 2;
    var rotation = matrixToDegrees( item.css('transform') );

    $(document).on("mousemove touchmove", function (e) {
      var newY = e.type === "mousemove" ? e.pageY : e.originalEvent.touches[0].pageY;
      var newX = e.type === "mousemove" ? e.pageX : e.originalEvent.touches[0].pageX;

      var deltaY = newY - startTop;
      var deltaX = newX - startLeft;
      var newHeight = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

      var currentAngle = Math.atan2(deltaY, deltaX) * 180 / Math.PI - 90 + rotation;

      item.css({
        height: newHeight,
        transform: `rotate(${currentAngle}deg) scale(1)`,
        transformOrigin: "top center"
      });
      
      svg.attr('viewBox', `0 0 ${startWidth} ${newHeight}`);
      shape.attr('height', newHeight);

      if (item.attr("data-shape") === "triangle") {
        shape.attr('points', `${startWidth / 2},0 ${startWidth},${newHeight} 0,${newHeight}`); // For triangle
      } else if (item.attr("data-shape") === "diamond") {
        shape.attr('points', `${startWidth / 2},0 ${startWidth},${newHeight / 2} ${startWidth / 2},${newHeight} 0,${newHeight / 2}`); // For diamond
      } else {
        shape.attr('height', newHeight);
        shape.attr('width', startWidth);
      }
    });

    $(document).on("mouseup touchend", function () {
      $(document).off("mousemove touchmove");
      $(document).off("mouseup touchend");
    });
  });


  document.addEventListener('contextmenu', function (e) {
    e.preventDefault();
  });

});
</script>

<%- include('../foot'); -%>