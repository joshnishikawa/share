<%- include('../head.ejs') -%>
<%- include('navbar.ejs') -%>
<style>
  .activity .pawn {
    width: 32px;
    height: 16px;
    display: inline-block;
  }

</style>


<div class="container-fluid">
  <div class="row">
    <div class="col-sm-4 mb-3">

<!-- MY GROUP -->
      <div id="myGroup" class="container alert-primary border border-primary rounded-3 pb-3 mb-3">
        <div class="row">

          <div class="col-3">
            Group:
          </div>

          <div class="col-9 fs-1">
            <div id="roomname"></div>
          </div>

        </div>
        <div class="row bg-light border border-primary rounded-3">

          <div class="col-2">
            <div id="myPawn" class="my-1 text-center" style="margin:auto;width:32px;"></div>
          </div>

          <div class="col-10">
            <div id="myName" class="fs-3" style="text-shadow:0px 0px 2px #555"></div>
            <div class="d-flex justify-content-between mb-1">
              <button id="getName" class="btn btn-sm btn-outline-primary px-1 py-0">Change Name</button>
              <input id="color" class="form-control form-control-sm p-0 mx-1" type="color">
            </div>
          </div>

        </div>
        <div id="otherPlayers"></div><!-- rows for other players will be added dynamically here -->

        <div class="row" id="leaveGroup" style="display: none;">
          <div class="col d-flex px-0">
            <img src="/image/exit.svg" alt="leave group" class="img-fluid point" style="width: 64px; height: 64px;" title="Leave Group">
            <div id="info" class="ms-2 align-self-center"></div>
          </div>
        </div>
 
      </div> <!-- end of myGroup -->


<!-- FRIEND'S GROUP -->
      <div id="group" class="container alert-success text-center border border-success rounded-3 py-3" style="display: none;">
        <div class="row">

          <div class="col-12 g-0">
            <div id="foundplayers" class="text-success mb-3">
              <!-- player names only will be added dynamically here -->
            </div>
            <form id="roomSearchForm" class="form d-flex">
              <button id="join" class="btn btn-success" disabled>
                <i class="material-icons fs-1">groups</i>
              </button>
              <input id="roomSearch" class="form-control fs-1 text-success text-center" placeholder="join">
            </form>
          </div>

        </div>
      </div> <!-- end of friend's group -->

    </div> 

    <div id="activity" class="col-sm-8">

      <div class="btn btn-outline-primary activity d-flex justify-content-between w-100" id="choose">
        Choose  
      </div>  

      <div class="btn btn-outline-primary activity d-flex justify-content-between w-100" id="race">
        Race
      </div>  

      <div class="btn btn-outline-primary activity d-flex justify-content-between w-100" id="match">
        Match
      </div>
    </div>

    <div class="col-sm-4">
      <%//- include('../menu/select_NH.ejs') %>
    </div>

  </div>
</div>



<script src="https://cdn.socket.io/4.0.1/socket.io.js"></script>

<script>
// VARIABLES ////////////////////////////////////////////////////////////////////
  var room = {};
  var player = {id: null, color: "#cccccc", roomname: null, roomtype: "private", closed: false, number: 1, activity: null};
  var socket = io();
  var timer;
  
  // Initialize global variables for NH vocabulary
  window.deck = [];
  window.local = [];
  window.deckType = 'NH';

  // Define global functions for NH vocabulary
  addWords = (list) => {
    for (let l of list) {
      if (!window.deck.includes(l.id)) {
        window.deck.push(l.id);
        window.local.push(l);
      }
    }
  }

  removeWords = (list) => {
    for (let i of list) {
      window.deck = window.deck.filter(d => d !== i && d !== i.id && d !== i.word);
      window.local = window.local.filter(l => l.id !== i.id && l.id !== i.word);
    }
  }

$(function(){
  // localStorage.removeItem('player'); // DEBUG: so I don't have to clear my iPhone cache
  $(`#groups-tab`).addClass("active");

  $(".menuitem").on('submit', (e)=>{
    e.preventDefault();
        if (!window.deck || window.deck.length == 0) {
      alert("<%- __('pleaseSelect') %>");
    }
    else {
      $(e.target).find("input[name='deck']").val(JSON.stringify(window.deck));
      $(e.target).find("input[name='deckType']").val(window.deckType);
      $(e.target).off('submit').submit();
    }
  });


// FUNCTIONS ////////////////////////////////////////////////////////////////////
  function updatePlayerList(data){
    // Cache DOM elements to avoid repeated queries
    const $group = $("#group");
    const $leaveGroup = $("#leaveGroup");
    const $otherPlayers = $(`#otherPlayers`);
    const $activities = $(".activity");
    
    if (data.length != 1 || player.roomtype == "public") {
      $group.removeClass("d-flex").addClass("d-none");
      $leaveGroup.show();
    }
    else {
      $group.removeClass("d-none").addClass("d-flex");
      $leaveGroup.hide();
    }

    // Clear old content once
    $otherPlayers.empty();
    $activities.find(".pawn").remove();

    // Build HTML string instead of multiple DOM manipulations
    let otherPlayersHTML = '';

    for (let p of data) {
      if (p.id == player.id){
        $(`#myPawn`).html(getPawn(player.color));
        $(`#myName`).text(p.id);
        $(`#myName`).css('color', player.color);
        $(`#color`).val(player.color);
        localStorage.setItem('player', JSON.stringify(player));
      }
      else {
        otherPlayersHTML += `
          <div class="row bg-light border border-primary rounded-3">
            <div class="col-2">
              <div class="pawn${p.number} text-center my-1" style="margin:auto;width:24px;"></div>
            </div>
            <div class="col-10">
              <div id="name${p.number}" class="fs-4" style="color: ${p.color};text-shadow:0px 0px 2px #555;">${p.id}</div>
            </div>
          </div>
        `;
      }
    }
    
    // Single DOM update for other players
    if (otherPlayersHTML) {
      $otherPlayers.html(otherPlayersHTML);
    }
    
    // Set colors and pawns after DOM is updated
    for (let p of data) {
      if (p.id != player.id) {
        setColor(p.number, p.color);
      }
      if (p.activity) {
        $(`#${p.activity}`).append(getPawn(p.color));
      }
    }
  }


  function getPawn(color) {
    let shadow = reduceBrightness(color, 20);
    let def = shadow.replace("#", "");
    return `
<svg class="img-fluid pawn" width="64" height="128" viewBox="0 0 64 128" xmlns="http://www.w3.org/2000/svg">
    <!-- Body of the pawn -->
    <path transform="matrix(0.78482373,0,0,0.3410327,-40.6,58)" d="m 54.796244,189.05536 c -12.062025,-20.89204 13.56978,-65.28763 37.693831,-65.28763 24.124055,0 49.755855,44.39559 37.693825,65.28763 -12.06202,20.89204 -63.325631,20.89204 -75.387656,0 z" fill="${color}" />
    <path transform="matrix(0.78482373,0,0,0.3410327,-40.6,58)" d="m 54.796244,189.05536 c -12.062025,-20.89204 13.56978,-65.28763 37.693831,-65.28763 24.124055,0 49.755855,44.39559 37.693825,65.28763 -12.06202,20.89204 -63.325631,20.89204 -75.387656,0 z" fill="url(#${def}1)" />
    <path transform="matrix(0.45050681,0,0,0.62867557,3.2,35)" d="m 105,121.60049 c -11.851854,8.65104 -69.62828,8.77896 -81.518324,0.1805 C 11.591632,113.18252 -6.3839294,58.273407 -1.8805296,44.308232 2.6228701,30.343057 49.289789,-3.7205685 63.963086,-3.7530573 78.636384,-3.785546 125.45369,30.071092 130.01888,44.016188 134.58408,57.961284 116.85185,112.94946 105,121.60049 Z" fill="${color}" />
    <path transform="matrix(0.45050681,0,0,0.62867557,3.2,35)" d="m 105,121.60049 c -11.851854,8.65104 -69.62828,8.77896 -81.518324,0.1805 C 11.591632,113.18252 -6.3839294,58.273407 -1.8805296,44.308232 2.6228701,30.343057 49.289789,-3.7205685 63.963086,-3.7530573 78.636384,-3.785546 125.45369,30.071092 130.01888,44.016188 134.58408,57.961284 116.85185,112.94946 105,121.60049 Z" fill="url(#${def}1)" />

    <!-- Head of the pawn -->
    <circle cx="32" cy="22" r="22" fill="${color}" />
    <circle cx="32" cy="22" r="22" fill="url(#${def}2)" />
  
    <!-- Shading gradients -->
    <defs>
      <radialGradient id="${def}1" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
        <stop offset="50%" style="stop-color:${shadow};stop-opacity:0" />
        <stop offset="100%" style="stop-color:${shadow};stop-opacity:1" />
      </radialGradient>

      <radialGradient id="${def}2" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
        <stop offset="50%" style="stop-color:${shadow};stop-opacity:0" />
        <stop offset="100%" style="stop-color:${shadow};stop-opacity:1" />
      </radialGradient>
    </defs>
  </svg>`;
  }


  function reduceBrightness(hex, percent) {
    var num = parseInt(hex.replace("#", ""), 16),
        amt = Math.round(2.55 * percent),
        R = (num >> 16) - amt,
        G = (num >> 8 & 0x00FF) - amt,
        B = (num & 0x0000FF) - amt;
    let returnme = "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 + (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 + (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    return returnme;
  }


  function getName() {
    return new Promise((resolve, reject) => {
      socket.emit('getName', player);

      // Remove any existing listener to prevent memory leaks
      socket.off('setName.getName');
      
      socket.on('setName.getName', function(data) {
        if (data.id) {
          player.id = data.id;
          socket.off('setName.getName'); // Clean up immediately
          resolve();
        } else {
          socket.off('setName.getName'); // Clean up on error too
          reject('Failed to get name from server');
        }
      });
    });
  }


  function setColor(number, color) {
    if (number == player.number){
      player.color = color;
      localStorage.setItem('player', JSON.stringify(player));
      $(`#myPawn`).html(getPawn(color));
      $(`#myName`).css('color', color);
      $("#color").val(color);
      
      // Update activity pawn if player has selected an activity
      if (player.activity) {
        $(`.activity .pawn`).filter(function() {
          return $(this).closest(`#${player.activity}`).length > 0;
        }).html(getPawn(color));
      }
      
      socket.emit('setColor', player);
    }
    else {
      $(`.pawn${number}`).html(getPawn(color));
      $(`#name${number}`).css('color', color);
    }
  }


  function loadActivity(activity) {
    // load from url
    if (activity == "choose") {
      $("#activity").load("/pages/groups/choose.html", function() {
        // Initialize the game after loading the HTML
        // if (typeof initChooseGame === 'function') {
        //   initChooseGame();
        // }
      });
    }
  }


// EVENTS //////////////////////////////////////////////////////////////////////
  let roomSearchTimeout;
  $("#roomSearch").on('input', ()=>{
    // Debounce room search to avoid excessive server calls
    clearTimeout(roomSearchTimeout);
    roomSearchTimeout = setTimeout(() => {
      socket.emit('roomSearch', $("#roomSearch").val());
    }, 300); // Wait 300ms after user stops typing
  });

  $("#roomSearchForm").on('submit', (e)=>{
    e.preventDefault();
    if ($("#join").prop('disabled')) return; // if #join disabled, room !exists
    let newRoom = $("#roomSearch").val();
    socket.emit('join', {newRoom, player});
    $("#roomSearch").val('');
    $("#foundplayers").empty();
    $("#join").prop('disabled', true);
  });

  $("#getName").on('click', getName);

  $("#color").on('change', ()=>{
    let color = $("#color").val();
    setColor(player.number, color);
  });

  $("#leaveGroup").on('click', ()=>{
    socket.emit('leave', player);
    // Don't trigger room search here - let the server handle the rejoin
  });

  $(".activity").on("click", function () {
    let activity = $(this).attr("id");
    player.activity = activity;
    socket.emit("chooseActivity", player);
  });


// SOCKET EVENTS ///////////////////////////////////////////////////////////////
  socket.on('connect', async()=>{
    let stored_player = await JSON.parse(localStorage.getItem('player'));
    if (!stored_player) await getName();
    else player = stored_player;
    socket.emit('join', player);
  });


  socket.on('joined', (data)=>{
    room = data.room;
    player.number = data.playerNum;
    player.roomname = room.roomname;
    player.roomtype = room.roomtype; // Make sure roomtype is updated
    localStorage.setItem('player', JSON.stringify(player));
    $(`#room`).text(player.roomname);
    $(`#roomname`).text(player.roomname);
    updatePlayerList(room.players);
    if (room.activity) {
      player.activity = room.activity;
      loadActivity(room.activity);
    }
  });


  socket.on('setName', (data)=>{
    if (data.number == player.number) {
      player.id = data.id;
      localStorage.setItem('player', JSON.stringify(player));
      $(`#myName`).text(data.id);
    }
    else {
      $(`#name${data.number}`).text(data.id);
    }
  });


  socket.on('roomSearch', (data)=>{
    if (data && data.roomname != player.roomname) {
      for (let p of data.players) {
        $(`#foundplayers`).append(`<div style="color: ${p.color};text-shadow:0px 0px 2px #000;">${p.id}</div>`);
      }
      $("#join").prop('disabled', false);
    }
    else {
      $(`#foundplayers`).empty();
      $("#join").prop('disabled', true);
    }
  });


  // other players' events /////////////////////////////////////////////////////
  socket.on('playerJoined', (data)=>{
    updatePlayerList(data);
  });
  
  socket.on('youLeft', (data)=>{
    room = {};
    player.roomname = null; // reset the roomname
    player.roomtype = "private"; // reset the roomtype
    player.number = 1; // reset the player number
    player.activity = null; // reset the activity
    
    // Clear UI elements
    $(`#otherPlayers`).empty();
    $(".activity").find(".pawn").remove();
    $("#foundplayers").empty();
    $("#roomSearch").val('');
    $("#join").prop('disabled', true);
    
    // Update localStorage and join new room
    localStorage.setItem('player', JSON.stringify(player));
    socket.emit('join', player); // join a new private room
  });

  socket.on('playerLeft', (data)=>{
    updatePlayerList(data);
  });

  socket.on('setColor', (data)=>{
    // Update the player's color in the room data
    if (room && room.players) {
      const player = room.players.find(p => p.number === data.number);
      if (player) {
        player.color = data.color;
      }
    }
    
    // Update visual elements
    setColor(data.number, data.color);
    
    // If activity info is provided, specifically update that activity pawn
    if (data.activity) {
      $(`#${data.activity} .pawn`).html(getPawn(data.color));
    }
  });

  socket.on('roomOpened', (data)=>{
    $("#leaveGroup").show();
    player.roomtype = "public";
    localStorage.setItem('player', JSON.stringify(player));
    updatePlayerList(data);
  });

  socket.on('activityChosen', (data)=>{
    updatePlayerList(data);
  });

  socket.on('loadActivity', (data)=>{
    loadActivity(data);
  });

});
</script>

<%- include('../foot.ejs') -%>
