<%- include('../head.ejs') -%>
<%- include('navbar.ejs') -%>

<div class="container-fluid">
  <div class="row">
    <div class="col-sm-4 mb-3">

<!-- MY GROUP -->
      <div id="myGroup" class="container alert-primary text-center border border-primary rounded-3 pb-3 mb-3">
        <div class="row">
          <div class="col-4">
            My Group:
          </div>
          <div class="col-8 fs-1">
            <div id="room"></div>
          </div>
        </div>

        <div class="row bg-light border border-primary rounded-3 px-1">
          <div class="col-2 g-0">
            <div id="myPawn" class="my-1" style="margin:auto;width:32px;"></div>
          </div>
          <div class="col-10">
            <div id="myName" class="fs-3" style="text-shadow:0px 0px 2px #555"></div>
            <div class="d-flex mb-1 justify-content-center">
              <button id="getName" class="btn btn-sm btn-outline-primary px-1 py-0">Change Name</button>
              <input id="color" type="color">
            </div>
          </div>
        </div>

        <div id="otherPlayers">
          <!-- players will be added dynamically here -->
        </div>

      </div> <!-- end of myGroup -->


<!-- FRIEND'S GROUP -->
      <div id="group" class="container alert-success text-center border border-success rounded-3 py-3">
        <div class="row">
          <div class="col-12 g-0">

            <form id="roomSearchForm" class="form d-flex">
              <button id="join" class="btn btn-success" disabled>
                <i class="material-icons fs-1">groups</i>
              </button>
              <input id="roomSearch" class="form-control fs-1 text-success text-center" placeholder="join">
            </form>

          </div>
        </div>

<!-- players will be added dynamically here -->

      </div> <!-- end of friend's group -->

    </div> 
    
    <div id="activity" class="col-sm-8 border border-primary mb-3">
      <!-- <div id="choose" class="activity btn btn-lg btn-success display-1">Choose</div> -->
       <p>TODO: Users need to be able to leave / close rooms.</p>
       <p>Player IDs should be listed before user hits 'join' button.</p>
       <p></p>
       <div id="choose" class="activity btn btn-lg btn-success display-1">Choose</div>
    </div>

  </div>
</div>



<script src="https://cdn.socket.io/4.0.1/socket.io.js"></script>

<script>
$(function(){
  $(`#groups-tab`).addClass("active");

  $(".activity").on('click', function(){
    loadActivity( $(this).attr('id') );
  });

  function loadActivity(activity) {
    // fetch(`/pages/groups/${activity}.html`)
    //   .then(response => response.text())
    //   .then(html => {
    //     $("#activity").html(html);
    //   })
    //   .catch(error => console.error('Error loading activity:', error));
    $.ajax({
      url: `/pages/groups/${activity}.html`,
      method: 'GET',
      success: function(response) {
        $('#activity').html(response);
      },
      error: function(xhr, status, error) {
        console.error('Error loading content:', error);
      }
    });
  }

// VARIABLES ////////////////////////////////////////////////////////////////////
  var socket = io();
  var room = {};
  var player = {id: null, color: "#cccccc", number: 1};

// FUNCTIONS ////////////////////////////////////////////////////////////////////
  function updatePlayerList(data){
    $(`#otherPlayers`).empty();
        for (let p of data) {
          if (p.id == player.id) continue;

          $(`#otherPlayers`).append(`
            <div class="row bg-light border border-primary rounded-3">
              <div class="col-2">
                <div id="pawn${p.number}" class="mx-2 my-1"></div>
              </div>
              <div class="col-10">
                <div id="name${p.number}" class="fs-4" style="color: ${p.color};text-shadow:0px 0px 2px #555;">${p.id}</div>
              </div>
            </div>
          `);
          setColor(p.number, p.color);
        }
  }


  function getPawn(color) {
    let shadow = reduceBrightness(color, 20);
    let def = shadow.replace("#", "");
    return `
<svg class="img-fluid" width="64" height="128" viewBox="0 0 64 128" xmlns="http://www.w3.org/2000/svg">
    <!-- Body of the pawn -->
    <path transform="matrix(0.78482373,0,0,0.3410327,-40.6,58)" d="m 54.796244,189.05536 c -12.062025,-20.89204 13.56978,-65.28763 37.693831,-65.28763 24.124055,0 49.755855,44.39559 37.693825,65.28763 -12.06202,20.89204 -63.325631,20.89204 -75.387656,0 z" fill="${color}" />
    <path transform="matrix(0.78482373,0,0,0.3410327,-40.6,58)" d="m 54.796244,189.05536 c -12.062025,-20.89204 13.56978,-65.28763 37.693831,-65.28763 24.124055,0 49.755855,44.39559 37.693825,65.28763 -12.06202,20.89204 -63.325631,20.89204 -75.387656,0 z" fill="url(#${def}1)" />
    <path transform="matrix(0.45050681,0,0,0.62867557,3.2,35)" d="m 105,121.60049 c -11.851854,8.65104 -69.62828,8.77896 -81.518324,0.1805 C 11.591632,113.18252 -6.3839294,58.273407 -1.8805296,44.308232 2.6228701,30.343057 49.289789,-3.7205685 63.963086,-3.7530573 78.636384,-3.785546 125.45369,30.071092 130.01888,44.016188 134.58408,57.961284 116.85185,112.94946 105,121.60049 Z" fill="${color}" />
    <path transform="matrix(0.45050681,0,0,0.62867557,3.2,35)" d="m 105,121.60049 c -11.851854,8.65104 -69.62828,8.77896 -81.518324,0.1805 C 11.591632,113.18252 -6.3839294,58.273407 -1.8805296,44.308232 2.6228701,30.343057 49.289789,-3.7205685 63.963086,-3.7530573 78.636384,-3.785546 125.45369,30.071092 130.01888,44.016188 134.58408,57.961284 116.85185,112.94946 105,121.60049 Z" fill="url(#${def}1)" />

    <!-- Head of the pawn -->
    <circle cx="32" cy="22" r="22" fill="${color}" />
    <circle cx="32" cy="22" r="22" fill="url(#${def}2)" />
  
    <!-- Shading gradients -->
    <defs>
      <radialGradient id="${def}1" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
        <stop offset="50%" style="stop-color:${shadow};stop-opacity:0" />
        <stop offset="100%" style="stop-color:${shadow};stop-opacity:1" />
      </radialGradient>

      <radialGradient id="${def}2" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
        <stop offset="50%" style="stop-color:${shadow};stop-opacity:0" />
        <stop offset="100%" style="stop-color:${shadow};stop-opacity:1" />
      </radialGradient>
    </defs>
  </svg>`;
  }


  function reduceBrightness(hex, percent) {
    var num = parseInt(hex.replace("#", ""), 16),
        amt = Math.round(2.55 * percent),
        R = (num >> 16) - amt,
        G = (num >> 8 & 0x00FF) - amt,
        B = (num & 0x0000FF) - amt;
    let returnme = "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 + (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 + (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    return returnme;
  }


  function getName(socket) {
    return new Promise((resolve, reject) => {
      socket.emit('getName', { room, player });

      socket.on('setName', function(data) {
        if (data.id) {
          player.id = data.id;
          resolve(data.id);
        } else {
          reject('Failed to get name from server');
        }
      });
    });
  }


  function setColor(number, color) {
    if (number == player.number){
      player.color = color;
      localStorage.setItem('player', JSON.stringify(player));
      $(`#myPawn`).html(getPawn(color));
      $(`#myName`).css('color', color);
      $("#color").val(color);
    }
    else {
      $(`#pawn${number}`).html(getPawn(color));
      $(`#name${number}`).css('color', color);
    }
    // add other things to change color or make #pawn & #name into classes?
  }


// EVENTS //////////////////////////////////////////////////////////////////////
  $("#roomSearch").on('input', ()=>{
    socket.emit('roomSearch', $("#roomSearch").val());
  });

  $("#roomSearchForm").on('submit', (e)=>{
    e.preventDefault();
    // if #join is disabled, then the room does not exist
    if ($("#join").prop('disabled')) return;
    let data = { room: {roomname: $("#roomSearch").val(), type: 'private'}, player};
    socket.emit('join', data);
  });

  $("#getName").on('click', ()=>{
    socket.emit('getName', {room, player});
  });

  $("#color").on('change', ()=>{
    let color = $("#color").val();
    player.color = color;
    setColor(player.number, color);
    socket.emit('setColor', {room, player});
  });




// SOCKET EVENTS ///////////////////////////////////////////////////////////////
  socket.on('connect', async()=>{
    // localStorage.setItem('player', JSON.stringify({id: "Daring Seafarer", color: "#b20a0a", number: 1}))
    let stored_player = JSON.parse(localStorage.getItem('player'));
    let stored_room = JSON.parse(localStorage.getItem('room'));

    if (stored_player){
      player = stored_player;
      $("#myName").text(player.id);
      setColor(player.number, player.color);
    }
    else {
      $("#myPawn").html(getPawn(player.color));
      await getName(socket);
      await setColor(player.number, player.color);
    }


    if (stored_room) {
      let now = new Date();
      if (now - new Date(stored_room.date) > 1000*60*60*12) { // 12 hours old, delete
        localStorage.removeItem('room');
        socket.emit('join', {player});
      }
      else {
        room = stored_room;
        socket.emit('join', {room, player});
      }
    }
    else {
      socket.emit('join', {player});
    }
  });


  socket.on('joined', (data)=>{
    if (data.room) {
      room = data.room;
      player.number = data.playerNum;
      localStorage.setItem('room', JSON.stringify(data.room));
      localStorage.setItem('player', JSON.stringify(player));
      $(`#room`).text(room.roomname);
      updatePlayerList(data.room.players);
    }
    else {
      localStorage.removeItem('room');
      socket.emit('join', {player});
    }
  });


  socket.on('setName', (data)=>{
    if (data.number == player.number) {
      player.id = data.id;
      localStorage.setItem('player', JSON.stringify(player));
      $(`#myName`).text(data.id);
    }
    else {
      $(`#name${data.number}`).text(data.id);
    }
  });


  socket.on('roomSearch', (data)=>{
    if (data) {
      $("#join").prop('disabled', false);
    }
    else {
      $("#join").prop('disabled', true);
    }
  });


  // other players' events /////////////////////////////////////////////////////
  socket.on('playerJoined', (data)=>{
    console.log('what the absolute fuck?');
    console.log(data);
    updatePlayerList(data.players);
  });


  socket.on('setColor', (data)=>{
    setColor(data.number, data.color);
  });
});

</script>

<%- include('../foot.ejs') -%>
  