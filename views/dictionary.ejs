<style>
  ::placeholder { text-align:right; }
  input:-moz-placeholder { text-align:right; }
  ::-ms-input-placeholder { text-align:right; }
</style>


<div class="container-fluid" style="height:350px;">

  <div class="row">
<!-- SELECT VOCAB FORMS ------------------------------------------------------->
    <div class="col-md-4">
      <div class="border border-white rounded-3 alert-secondary px-3">
        <span class="text-primary display-6 YM">Dictionary</span>
        <input id="searchInput" name="word" type="text"
               class="form-control my-2" placeholder="<%- __('text') %>">

        <!-- <div class="d-flex justify-content-end">
          <div class="text-muted me-3"><%//- __('speech') %></div>
          <div id="speech_recognition" class="btn btn-success">
            <i class="material-icons">mic</i>
          </div>
        </div> -->
      </div>
    </div>

    <div class="col-md-8">
      <div id="output"></div>
    </div>


  </div>
</div>


<!-- <script src="javascripts/spell.js" type="text/javascript"></script> -->
<script type="module">
import translate from "https://cdn.jsdelivr.net/npm/translate/index.min.js";

$(function(){
  let typingTimer;
  const typingDelay = 500; // Delay in milliseconds

  var words = {};
  $.get('/vocablist')
    .done((data) => {
      words = data;
    })
    .fail((xhr, status, error) => {
      console.error("Failed to load vocabulary:", error);
      $("#output").html('<div class="alert alert-danger">Failed to load vocabulary. Please try refreshing the page.</div>');
    });


// TEXT INPUT //////////////////////////////////////////////////////////////////
  $('#searchInput').on('input', async function(){
    clearTimeout(typingTimer);
    typingTimer = setTimeout(async () => {
      $("#output").html('<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>');
      let word = $(this).val();

      let EnglishWord = '';
      let JapaneseWord = '';
      let isJapanese = word.match(/[\u3040-\u30ff\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff]/);

      if (word && isJapanese) {
        JapaneseWord = word;
        try{
          EnglishWord = await translate(word, { from: "ja", to: "en" });
        } catch (error) {
          console.error("Translation error:", error);
          EnglishWord = "Translation failed";
        }
      } else if (word) {
        EnglishWord = word;
        try {
          JapaneseWord = await translate(word, { from: "en", to: "ja" });
        } catch (error) {
          console.error("Translation error:", error);
          JapaneseWord = "Translation failed";
        }
      } else {
        $("#output").html('');
        return;
      }

      function processWord(EnglishWord, JapaneseWord) {
        let image = '';
        let audio = '';
        
        if (Object.keys(words).includes(EnglishWord)) {
          image = `<img src="${words[EnglishWord].image}" class="img-fluid" style="max-height:300px;">`;
          audio = words[EnglishWord].audio;
          if (JapaneseWord != words[EnglishWord].meaning) {
            JapaneseWord += `, ${words[EnglishWord].meaning}`;
          }
        } else {
          let lc = EnglishWord.toLowerCase();
          if (Object.keys(words).includes(lc)) {
            EnglishWord = lc;
            image = `<img src="${words[EnglishWord].image}" class="img-fluid" style="max-height:300px;">`;
            audio = words[lc].audio;
            if (JapaneseWord != words[lc].meaning) {
              JapaneseWord += `, ${words[lc].meaning}`;
            }
          }
        }
        
        return { EnglishWord, JapaneseWord, image, audio };
      }

      const { EnglishWord: processedEnglish, JapaneseWord: processedJapanese, image, audio } = processWord(EnglishWord, JapaneseWord);
      showWord({word: EnglishWord, meaning: JapaneseWord, image, audio});
    }, typingDelay);
  });


// SPEECH RECOGNITION //////////////////////////////////////////////////////////
  const SpeechRecognition =
    window.SpeechRecognition || window.webkitSpeechRecognition;
  const SpeechGrammarList =
    window.SpeechGrammarList || window.webkitSpeechGrammarList;
  const SpeechRecognitionEvent =
    window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;

  var recognition = new SpeechRecognition();
  // const grammar = `#JSGF V1.0; grammar words; public <word> = ${words.join(" | ")};`;
  // var speechRecognitionList = new SpeechGrammarList();
  // speechRecognitionList.addFromString(grammar, 1);
  // recognition.grammars = speechRecognitionList;
  recognition.continuous = false;
  recognition.lang = "en-US";
  recognition.interimResults = false;
  recognition.maxAlternatives = 1;

  $("#speech_recognition").on('mousedown', () => {
    recognition.start();
  }).on('mouseup', () => {
    $("#output").html('');
    recognition.stop();
  });

  recognition.onstart = () => {
    $("#output").html("Listening...");
  };

  recognition.onresult = async (event) => {
    let image = '';
    let audio = '';
    let EnglishWord = event.results[0][0].transcript;
    let conf = Math.round(event.results[0][0].confidence*100);
    let JapaneseWord = await translate(EnglishWord, { from: "en", to: "ja" });

    if (Object.keys(words).includes(EnglishWord)) {
      image = `<img src="${words[EnglishWord].image}" class="img-fluid" style="max-height:300px;">`;
      audio = words[EnglishWord].audio;
      if (JapaneseWord != words[EnglishWord].meaning) {
        JapaneseWord += `, ${words[EnglishWord].meaning}`;
      }
    } else {
      let lc = EnglishWord.toLowerCase();
      if (Object.keys(words).includes(lc)) {
        EnglishWord = lc;
        image = `<img src="${words[EnglishWord].image}" class="img-fluid" style="max-height:300px;">`;
        audio = words[lc].audio;
        if (JapaneseWord != words[lc].meaning) {
          JapaneseWord += `, ${words[lc].meaning}`;
        }
      }
    }
    showWord({word: EnglishWord, meaning: JapaneseWord, image, audio});
  };

  recognition.onerror = (event) => {
    console.error(event);
    $("#output").html(`Error occurred in recognition: ${event.error}`);
  };

  recognition.onend = () => {
    $("#output").html('');
  };


  function showWord(w) {
    let id = w.word.replace(/[ '-.]/g, '_');
     $("#output").html(
     `<div class="bg-light shadow border rounded-3 p-3 YM d-flex">
        <div>
          <span class="text-primary display-1">${w.word} </span> <br />
          <span class="display-5">${w.meaning}</span>
        </div>
        <div class="w-100 text-center">${w.image}</div>
      </div>`);
  }

});
</script>