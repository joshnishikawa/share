<%- include('../head.ejs') %>

<div class="d-flex justify-content-between">
  <div></div>
  <button id="home" class="btn btn-sm btn-outline-secondary p-0" onclick="location.href='/'">
    <i class="material-icons">home</i>
  </button>
</div>


<div class="container text-center mt-5">
  <canvas id="gameCanvas" width="600" height="450" class="alert-success mx-auto"></canvas>
</div>

<!-- modal for the 'listen' button -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Snake Game Voice Commands</h5>
      </div>
      <div class="modal-body">
        <ul>
          <li>Turn left</li>
          <li>Turn right</li>
          <li>Go straight</li>
          <li>Restart</li>
        </ul>
      </div>
      <div class="modal-footer">
        <button id="listen" type="button" class="btn btn-success">Start</button>
      </div>
    </div>
  </div>
</div>

<!-- modal for displaying messages -->
<div class="modal fade" id="messageModal" tabindex="-1" role="dialog" aria-labelledby="messageModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="messageModalLabel">Message</h5>
      </div>
      <div class="modal-body" id="messageModalBody">
      </div>
      <div class="modal-footer">
        <button id="playAgain" type="button" class="btn btn-primary" data-dismiss="modal">Play Again!</button>
        <button id="dismiss" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
  var canvas = document.getElementById('gameCanvas');
  var context = canvas.getContext('2d');
  var gridSize = 150;
  var positions = [
    {x: 0, y: 0 }, {x: 0, y: 150}, {x: 0, y: 300},
    {x: 150, y: 0}, {x: 150, y: 150}, {x: 150, y: 300},
    {x: 300, y: 0}, {x: 300, y: 150}, {x: 300, y: 300},
    {x: 450, y: 0}, {x: 450, y: 150}, {x: 450, y: 300}
  ];

  var snake = [];
  var food = {};
  var direction = 'up';
  var previousDirection = '';

  // COPY/PASTE & edit vocab anywhere you need speech recognition. ///////////////
  const vocab = ["turn left", "turn right", "go straight", "go straight two blocks", "restart"];
  const grammar = `#JSGF V1.0; grammar commands; public <commands> = ${vocab.join(" | ")};`;
  const SpeechRecognition =
    window.SpeechRecognition || window.webkitSpeechRecognition;
  const SpeechGrammarList =
    window.SpeechGrammarList || window.webkitSpeechGrammarList;
  const SpeechRecognitionEvent =
    window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;
  const recognition = new SpeechRecognition();
  const speechRecognitionList = new SpeechGrammarList();
  speechRecognitionList.addFromString(grammar, 1);
  recognition.grammars = speechRecognitionList;
  recognition.continuous = true;
  recognition.lang = "en-US";
  recognition.interimResults = false;
  recognition.maxAlternatives = 1;
////////////////////////////////////////////////////////////////////////////////
$(function () {
  $("#listen").on('click', () => {
    // dismiss modal
    $("#myModal").modal('hide');
    recognition.start();
    reset();
  });

  $("#dismiss").on('click', () => {
    $("#messageModal").modal('hide');
  });

  // show modal and focus on start button
  $("#myModal").modal('show').on('shown.bs.modal', () => {
    $("#listen").focus();
  });

  $(document).off('keydown').on('keydown', function(event) {
    if (event.key === 'q') {
      reset();
      return;
    }
    else if (    (event.key === 'ArrowUp' && previousDirection != 'down')
              || (event.key === 'ArrowDown' && previousDirection != 'up')   
              || (event.key === 'ArrowLeft' && previousDirection != 'right')
              || (event.key === 'ArrowRight' && previousDirection != 'left') ) {
      direction = event.key.replace('Arrow', '').toLowerCase();
      gameLoop();
    }
    else return;
  });
});


  recognition.onresult = (event) => {
    let command = event.results[event.results.length - 1][0].transcript.trim();

    if (!vocab.includes(command)) return;
    else {
      console.log(`Command received: ${command}`);
      switch (command) {
        case "turn left":
          turnLeft();
          break;
        case "turn right":
          turnRight();
          break;
        case "go straight":
          goStraight(direction);
          break;
        case "go straight two blocks":
          goStraight(direction);
          goStraight(direction);
          break;
        case "restart":
          reset();
          break;
        default:
          break;
      }
    }
  };

  recognition.onend = () => {
    console.log("Speech recognition ended. Restarting...");
    recognition.start();
  };

  recognition.onnomatch = (event) => {
    console.log("I didn't recognise that command.");
  };

  recognition.onerror = (event) => {
    console.log(`Error occurred in recognition: ${event.error}`);
  };


  function getFoodPosition(s) {
    let index = positions.indexOf(s);

    let foodPositions = [];
    switch (index) {
      case 0:
        foodPositions = [{x: 0, y: 150},{x: 150, y: 0},{ x: 150, y: 150 },{x: 300, y: 0},{ x: 450, y: 300 }];
        return foodPositions[Math.floor(Math.random() * foodPositions.length)];
      case 1: return {x: 0, y: 300};
      case 2: return {x: 0, y: 150};
      case 3:
        foodPositions = [{x: 0, y: 0 },{x: 0, y: 300},{x: 150, y: 300},{x: 300, y: 150}, {x: 300, y: 300}];
        return foodPositions[Math.floor(Math.random() * foodPositions.length)];
      case 4:
        foodPositions = [{x: 0, y: 0},{x: 300, y: 300}];
        return foodPositions[Math.floor(Math.random() * foodPositions.length)];
      case 5:
        foodPositions = [{x: 300, y: 0},{x: 450, y: 0}];
        return foodPositions[Math.floor(Math.random() * foodPositions.length)];
      case 6:
        foodPositions = [{x: 150, y: 300},{x: 450, y: 150}];
        return foodPositions[Math.floor(Math.random() * foodPositions.length)];
      case 7:
        foodPositions = [{x: 150, y: 0},{x: 450, y: 300}];
        return foodPositions[Math.floor(Math.random() * foodPositions.length)];
      case 8:
        foodPositions = [{x: 150, y: 0}, {x: 150, y: 150},{x: 300, y: 0},{x: 450, y: 0},{x: 450, y: 300}];
        return foodPositions[Math.floor(Math.random() * foodPositions.length)];
      case 9: return {x: 450, y: 150};
      case 10: return {x: 450, y: 0};
      case 11:
        foodPositions = [{x: 0, y: 0},{x: 150, y: 300},{x: 300, y: 150}, {x: 300, y: 300},{x: 450, y: 150}];
        return foodPositions[Math.floor(Math.random() * foodPositions.length)];

      default:
        return {x: 0, y: 0};
    }
  }

  function getRandomGridPosition() {
    let availablePositions = [];
    let isOnSnake;

    // get positions that are not on the snake
    for (let i = 0; i < positions.length; i++) {
      isOnSnake = false;
      for (let j = 0; j < snake.length; j++) {
        if (positions[i].x === snake[j].x && positions[i].y === snake[j].y) {
          isOnSnake = true;
          break;
        }
      }
      if (!isOnSnake) availablePositions.push(positions[i]);
    }
    let position = availablePositions[Math.floor(Math.random() * availablePositions.length)];
    return position;
  }

  function drawModule() {
    return {
      bodySnake: function(part, nextPart) { // TODO: x and y should indicate direction when passed to this function and other values should be adjusted accordingly 
        context.fillStyle = 'green';
        let x = part.x;
        let y = part.y;
        let d = part.dir;
        let nextD = nextPart ? nextPart.dir : '';
        
        if (nextD){
          if (d === 'up' && nextD === 'right' || d === 'left' && nextD === 'down') {
            // draw a square with a rounded bottom right corner
            context.beginPath();
            context.moveTo(x+10, y+gridSize-10);
            context.lineTo(x+10, y+10);
            context.lineTo(x+gridSize-10, y+10);
            context.arcTo(x+gridSize-10, y+gridSize-10, x+10, y+gridSize-10, 50);
            context.fill();
          } else if (d === 'up' && nextD === 'left' || d === 'right' && nextD === 'down') {
            // draw a square with a rounded bottom left corner
            context.beginPath();
            context.moveTo(x+10, y+10);
            context.lineTo(x+gridSize-10, y+10);
            context.lineTo(x+gridSize-10, y+gridSize-10);
            context.arcTo(x+10, y+gridSize-10, x+10, y+10, 50);
            context.fill();
          } else if (d === 'down' && nextD === 'right' || d === 'left' && nextD === 'up') {
            // draw a square with a rounded top right corner
            context.beginPath();
            context.moveTo(x+10, y+10);
            context.lineTo(x+10, y+gridSize-10);
            context.lineTo(x+gridSize-10, y+gridSize-10);
            context.arcTo(x+gridSize-10, y+10, x+10, y+10, 50);
            context.fill();
          } else if (d === 'down' && nextD === 'left' || d === 'right' && nextD === 'up') {
            // draw a square with a rounded top left corner
            context.beginPath();
            context.moveTo(x+10, y+gridSize-10);
            context.lineTo(x+gridSize-10, y+gridSize-10);
            context.lineTo(x+gridSize-10, y+10);
            context.arcTo(x+10, y+10, x+10, y+gridSize-10, 50);
            context.fill();
          }
          else {
            context.fillRect(x+10, y+10, gridSize-20, gridSize-20);
          }
        }
        else {
          context.fillRect(x+10, y+10, gridSize-20, gridSize-20);
        }


        switch (d) {
          case 'up':
            context.fillRect(x+10, y-10, gridSize-20, 20);
            break;
            case 'down':
            context.fillRect(x+10, y+gridSize-10, gridSize-20, 20);
            break;
          case 'left':
            context.fillRect(x-10, y+10, 20, gridSize-20);
            break;
            case 'right':
            context.fillRect(x+gridSize-10, y+10, 20, gridSize-20);
            break;
          default:
            break;
        }
      },
      headSnake: function(part) {
        let x = part.x;
        let y = part.y;
        let d = part.dir;
        context.fillStyle = 'red';
        switch (d) {
          case 'down':
            context.beginPath();
            context.moveTo(x+(gridSize/2)-10, y+gridSize-10);
            context.lineTo(x+(gridSize/2), y+gridSize+1);
            context.lineTo(x+(gridSize/2)+10, y+gridSize-10);
            context.fill();
            break;
          case 'up':
            context.beginPath();
            context.moveTo(x+(gridSize/2)-10, y+10);
            context.lineTo(x+(gridSize/2), y-1);
            context.lineTo(x+(gridSize/2)+10, y+10);
            context.fill();
            break;
          case 'right':
            context.beginPath();
            context.moveTo(x+gridSize-10, y+(gridSize/2)-10);
            context.lineTo(x+gridSize+1, y+(gridSize/2));
            context.lineTo(x+gridSize-10, y+(gridSize/2)+10);
            context.fill();
            break;
          case 'left':
            context.beginPath();
            context.moveTo(x+10, y+(gridSize/2)-10);
            context.lineTo(x-1, y+(gridSize/2));
            context.lineTo(x+10, y+(gridSize/2)+10);
            context.fill();
            break;
          default:
            break;
        }
        context.fillStyle = 'black';
        switch (d) {
          case 'up':
            // draw a rounded trapezoid pointing up
            context.beginPath();
            context.moveTo(x + 10, y + gridSize - 10); // Bottom left corner
            context.lineTo(x + 10, y + (gridSize / 2)); // Left side
            context.arcTo(x + (gridSize / 2) - 20, y + 10, x + (gridSize / 2), y + 10, 20); // Top left corner
            context.arcTo(x + (gridSize / 2) + 20, y + 10, x + gridSize - 10, y + (gridSize / 2), 20); // Top side
            context.lineTo(x + gridSize - 10, y + (gridSize / 2)); // Right side
            context.lineTo(x + gridSize - 10, y + gridSize - 10); // Bottom right corner
            context.lineTo(x + 10, y + gridSize - 10); // Bottom side
            context.closePath();
            context.fill();
            break;
          case 'down':
            // draw a rounded trapezoid pointing down
            context.beginPath();
            context.moveTo(x + 10, y + 10); // Top left corner
            context.lineTo(x + 10, y + (gridSize / 2)); // Left side
            context.arcTo(x + (gridSize / 2) - 20, y + gridSize - 10, x + (gridSize / 2), y + gridSize - 10, 20); // Bottom left corner
            context.arcTo(x + (gridSize / 2) + 20, y + gridSize - 10, x + gridSize - 10, y + (gridSize / 2), 20); // Bottom side
            context.lineTo(x + gridSize - 10, y + (gridSize / 2)); // Right side
            context.lineTo(x + gridSize - 10, y + 10); // Top right corner
            context.lineTo(x + 10, y + 10); // Top side
            context.closePath();
            context.fill();
            break;
          case 'left':
            // draw a rounded trapezoid pointing left
            context.beginPath();
            context.moveTo(x + gridSize - 10, y + 10); // Top right corner
            context.lineTo(x + (gridSize / 2), y + 10); // Top side
            context.arcTo(x + 10, y + (gridSize / 2) - 20, x + 10, y + (gridSize / 2), 20); // Top left corner
            context.arcTo(x + 10, y + (gridSize / 2) + 20, x + (gridSize / 2), y + gridSize - 10, 20); // Left side
            context.lineTo(x + (gridSize / 2), y + gridSize - 10); // Bottom side
            context.lineTo(x + gridSize - 10, y + gridSize - 10); // Bottom right corner
            context.closePath();
            context.fill();
            break;
          case 'right':
            // draw a rounded trapezoid pointing right
            context.beginPath();
            context.moveTo(x + 10, y + 10); // Top left corner
            context.lineTo(x + (gridSize / 2), y + 10); // Top side
            context.arcTo(x + gridSize - 10, y + (gridSize / 2) - 20, x + gridSize - 10, y + (gridSize / 2), 20); // Top right corner
            context.arcTo(x + gridSize - 10, y + (gridSize / 2) + 20, x + (gridSize / 2), y + gridSize - 10, 20); // Right side
            context.lineTo(x + (gridSize / 2), y + gridSize - 10); // Bottom side
            context.lineTo(x + 10, y + gridSize - 10); // Bottom left corner
            context.closePath();
            context.fill();
            break;
          default:
            // draw a rounded trapezoid pointing up
            context.beginPath();
            context.moveTo(x + 10, y + gridSize - 10); // Bottom left corner
            context.lineTo(x + 10, y + (gridSize / 2)); // Left side
            context.arcTo(x + (gridSize / 2) - 20, y + 10, x + (gridSize / 2), y + 10, 20); // Top left corner
            context.arcTo(x + (gridSize / 2) + 20, y + 10, x + gridSize - 10, y + (gridSize / 2), 20); // Top side
            context.lineTo(x + gridSize - 10, y + (gridSize / 2)); // Right side
            context.lineTo(x + gridSize - 10, y + gridSize - 10); // Bottom right corner
            context.lineTo(x + 10, y + gridSize - 10); // Bottom side
            context.closePath();
            context.fill();
            break;

            break;
        }
      },
      tailSnake: function(part, nextD) {
        let x = part.x;
        let y = part.y;
        let d = part.dir;
        context.fillStyle = 'green';

        context.save(); // Save the current canvas state

        // Rotate the path to match the direction
        if (d === 'down') {
          context.translate(x + gridSize / 2, y + gridSize / 2);
          context.rotate(Math.PI);
          context.translate(-x - gridSize / 2, -y - gridSize / 2);
        } else if (d === 'right') {
          context.translate(x + gridSize / 2, y + gridSize / 2);
          context.rotate(Math.PI / 2);
          context.translate(-x - gridSize / 2, -y - gridSize / 2);
        } else if (d === 'left') {
          context.translate(x + gridSize / 2, y + gridSize / 2);
          context.rotate(-Math.PI / 2);
          context.translate(-x - gridSize / 2, -y - gridSize / 2);
        }

        if (d === nextD) {
          // draw a straight tail
          context.beginPath();
          context.moveTo(x + 10, y-10); // Top left corner
          context.arcTo(x + 10, y + (gridSize / 2), x + (gridSize / 2), y + gridSize, gridSize/2); // Bottom left corner
          context.lineTo(x + (gridSize / 2), y + gridSize); // Bottom side
          context.arcTo(x + gridSize - 10, y + (gridSize / 2), x + gridSize - 10, y - 10, gridSize/2); // Bottom side
          context.lineTo(x + gridSize - 10, y - 10); // Top side
          context.lineTo(x + 10, y - 10); // Right side
          context.closePath();
          context.fill();

        }
        else if (    (d === 'up' && nextD === 'left')
                  || (d === 'left' && nextD === 'down') 
                  || (d === 'down' && nextD === 'right')
                  || (d === 'right' && nextD === 'up') ){
          // draw a tail curving to the right
          context.beginPath();
          context.moveTo(x + 10, y-10); // Top left corner
          context.arcTo(x + 10, y + gridSize, x + gridSize, y + gridSize, gridSize/2); // Bottom left corner
          context.lineTo(x + gridSize, y + gridSize)
          context.bezierCurveTo(x + (gridSize / 2), y + (gridSize / 2), x + gridSize - 10, y + gridSize/3, x + gridSize - 10, y - 10)
          context.lineTo(x + 10, y-10); // Top side
          context.closePath();
          context.fill();
        }
        else if (    (d === 'up' && nextD === 'right')
                  || (d === 'right' && nextD === 'down')
                  || (d === 'down' && nextD === 'left')
                  || (d === 'left' && nextD === 'up') ){
          // draw a tail curving to the left
          context.beginPath();
          context.moveTo(x + gridSize - 10, y - 10); // Top right corner
          context.arcTo(x + gridSize - 10, y + gridSize, x + 10, y + gridSize, gridSize/2); // Bottom right corner
          context.lineTo(x + 10, y + gridSize)
          context.bezierCurveTo(x + (gridSize / 2), y + (gridSize / 2), x + 10, y + gridSize/3, x + 10, y - 10)
          context.lineTo(x + gridSize - 10, y - 10); // Top side
          context.closePath();
          context.fill();
        }

        context.restore(); // Restore the canvas state

      },
      pizza: function(x, y) {
        // Draw pizza crust
        context.fillStyle = '#bb9966'; // Light brown color for crust
        context.beginPath();
        context.arc(x + gridSize / 2, y + gridSize / 2, gridSize / 2 - 10, 0, Math.PI * 2);
        context.fill();
        
        // Draw sauce
        context.fillStyle = '#FF4433'; // Tomato sauce color
        context.beginPath();
        context.arc(x + gridSize / 2, y + gridSize / 2, gridSize / 2 - 20, 0, Math.PI * 2);
        context.fill();

        // Draw toppings (pepperoni)
        context.fillStyle = '#8B0000'; // Pepperoni color
        context.beginPath();
        context.arc(x+gridSize*0.2, y+gridSize*0.5, 10, 0, Math.PI * 2);
        context.fill();

        context.beginPath();
        context.arc(x+gridSize*0.3, y+gridSize*0.3, 10, 0, Math.PI * 2);
        context.fill();

        context.beginPath();
        context.arc(x+gridSize*0.4, y+gridSize*0.8, 10, 0, Math.PI * 2);
        context.fill();

        context.beginPath();
        context.arc(x+gridSize*0.5, y+gridSize*0.6, 10, 0, Math.PI * 2);
        context.fill();

        context.beginPath();
        context.arc(x+gridSize*0.6, y+gridSize*0.2, 10, 0, Math.PI * 2);
        context.fill();

        context.beginPath();
        context.arc(x+gridSize*0.7, y+gridSize*0.7, 10, 0, Math.PI * 2);
        context.fill();

        context.beginPath();
        context.arc(x+gridSize*0.8, y+gridSize*0.4, 10, 0, Math.PI * 2);
        context.fill();

      }
    };
  }

  function turnLeft() {
    if (previousDirection === 'up') direction = 'left';
    else if (previousDirection === 'down') direction = 'right';
    else if (previousDirection === 'left') direction = 'down';
    else if (previousDirection === 'right') direction = 'up';
    else direction = 'left';
    gameLoop();
  }

  function turnRight() {
    if (previousDirection === 'up') direction = 'right';
    else if (previousDirection === 'down') direction = 'left';
    else if (previousDirection === 'left') direction = 'up';
    else if (previousDirection === 'right') direction = 'down';
    else direction = 'right';
    gameLoop();
  }

  function goStraight() {
    previousDirection = direction;
    gameLoop();
  }

  function reset() {
    direction = '';
    previousDirection = '';
    snake = [ positions[Math.floor(Math.random() * positions.length)] ];
    food = getFoodPosition(snake[0]);
    gameLoop();
  }

  function gameLoop() {
    context.clearRect(0, 0, canvas.width, canvas.height); //clear canvas
    let message = '';
    let head = { x: snake[0].x, y: snake[0].y, dir: direction};
    let tailDir = '';
    previousDirection = direction;

    snake[0].dir = previousDirection; // update direction of segment following head
    if (direction === 'up') head.y = snake[0].y - gridSize;
    if (direction === 'down') head.y = snake[0].y + gridSize;
    if (direction === 'left') head.x = snake[0].x - gridSize;
    if (direction === 'right') head.x = snake[0].x + gridSize;
    snake.unshift(head);

    if (head.x === food.x && head.y === food.y ){ // snake eats = yummy  
      tailDir = snake[snake.length-1].dir;
      food = getRandomGridPosition();
      if (!food){
        message = 'You won!';
      }
    }
    else {
      tailDir = snake.pop().dir;
    }

    // CHECK FOR COLLISION
    for (var i = 1; i < snake.length; i++) {
      if (head.x === snake[i].x && head.y === snake[i].y) {
        message = 'You bit yourself!';
        break;
      }
    }
    
    if (   head.x < 0 
        || head.x >= canvas.width 
        || head.y < 0 
        || head.y >= canvas.height){ // snake hits wall = dead
      message = 'You died!';
    }

    // DRAW THE SNAKE
    for (var i = 1; i < snake.length-1; i++) {
      drawModule().bodySnake(snake[i], snake[i+1]);
    }
    if (snake.length > 1) drawModule().tailSnake(snake[snake.length-1], tailDir);
    drawModule().headSnake(snake[0]);
    if (food)drawModule().pizza(food.x, food.y);

    // DISPLAY MESSAGE
    if (message) {
      setTimeout(function() { //delay alert so snake is drawn before alert shows
          $('#messageModalBody').text(message);
          $('#messageModal').modal('show').on('shown.bs.modal', () => {
            $('#playAgain').focus();
          });
          $('#playAgain').on('click', function() {
            reset();
            $('#messageModal').modal('hide');
          });
      }, 100);
    }
  }


</script>
<%- include('../foot.ejs') %>