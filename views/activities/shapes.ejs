<%- include('../head'); -%>

<style>
  .shape{height:14%;}
  .selected {filter: drop-shadow(0 0 0.5rem #0f0);}
  #colorMenu ul li, #tagMenuFiller {font-weight: bold;height:9%;}
  #colorMenu ul li:hover{cursor: pointer;}
</style>


<div class="container-fluid g-0">
  <div class="row g-0" style="height:100vh;">
    <div id="colorMenu" class="col ps-1 pt-1 bg-light" style="max-width:100px;">
      <ul class="nav vert-tabs d-flex flex-column" style="height:100%;">
        <li class="nav-item rounded-start p-2" style="color:white;background-color:red;">RED</li>
        <li class="nav-item rounded-start p-2" style="background-color: orange;">ORANGE</li>
        <li class="nav-item rounded-start p-2" style="background-color: yellow;">YELLOW</li>
        <li class="nav-item rounded-start p-2" style="color:white;background-color: green;">GREEN</li>
        <li class="nav-item rounded-start p-2" style="color:white;background-color: blue;">BLUE</li>
        <li class="nav-item rounded-start p-2" style="color:white;background-color: purple;">PURPLE</li>
        <li class="nav-item rounded-start p-2" style="background-color: hotpink;">PINK</li>
        <li class="nav-item rounded-start p-2 border border-end-0" style="background-color: white">WHITE</li>
        <li class="nav-item rounded-start p-2" style="color:white;background-color: black;">BLACK</li>

        <div id="tagMenuFiller" class="p-1" style="position:relative;flex: auto">
          <div style="position:absolute;bottom:5px;">

            <!-- selecting will replace the canvas with the selected canvas -->
            <select id="loadCanvas" class="form-control border-primary mb-1">
            </select>

            <!-- this button will open a modal for entering a name to save as -->
            <button id="saveCanvas" class="btn btn-sm btn-success">
              <i class="material-icons">save_alt</i>
            </button>

            <!-- this button will open a modal to confirm clearing the canvas -->

            <button id="clearCanvas" class="btn btn-sm btn-danger">
              <i class="material-icons">delete</i>
            </button>
          </div>
        </div>

      </ul> 
    </div>

    <div id="shapeMenu" class="col bg-light p-2" style="height:100%;max-width:100px;border:10px solid rgba(0,0,0,0);">
      <div class="shape" data-shape="circle">
        <svg class="circle-svg" width="100%" height="100%" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
          <circle cx="50" cy="50" r="45" fill="purple" stroke="black" stroke-width="1"/>
        </svg>
      </div>
      <div class="shape" data-shape="square">
        <svg class="square-svg" width="100%" height="100%" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
          <rect x="10" y="10" width="80" height="80" fill="green" stroke="black" stroke-width="1"/>
        </svg>
      </div>
      <div class="shape" data-shape="triangle">
        <svg class="triangle-svg" width="100%" height="100%" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
          <polygon points="50,5 95,95 5,95" fill="hotpink" stroke="black" stroke-width="1"/>
        </svg>
      </div>
      <div class="shape" data-shape="rectangle">
        <svg class="rectangle-svg" width="100%" height="100%" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
          <rect x="10" y="20" width="80" height="60" fill="orange" stroke="black" stroke-width="1"/>
        </svg>
      </div>
      <div class="shape" data-shape="diamond">
        <svg class="diamond-svg" width="100%" height="100%" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
          <polygon points="50,5 85,50 50,95 15,50" fill="blue" stroke="black" stroke-width="1"/>
        </svg>
      </div>
      <div class="shape" data-shape="star">
        <svg class="star-svg" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" fill="none">
          <polygon points="50,5 61,35 95,35 68,57 78,90 50,70 22,90 32,57 5,35 39,35" fill="yellow" stroke="black" stroke-width="1"/>
        </svg>
      </div>
      <div class="shape" data-shape="heart">
        <svg class="heart-svg" width="100%" height="100%" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="m 11.109127,15 a 27.5,27.5 0 0 0 0,38.890872 L 50,92.781746 88.890873,53.890872 A 27.5,27.5 0 0 0 88.890873,15 27.5,27.5 0 0 0 50,15 27.5,27.5 0 0 0 11.109127,15 Z" 
          fill="red" stroke="black" stroke-width="1"/>
        </svg>
      </div>
    </div>

  <!-- Canvas area for dragging and dropping shapes -->
    <div class="col" style="max-height:100vh;overflow:hidden;">
      <div id="canvas" class="border bg-med" style="height: 100%;overflow:hidden;"></div>
    </div>
  </div>
</div>

<div class="modal fade" id="clearCanvasModal" tabindex="-1" aria-labelledby="clearCanvasModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="clearCanvasModalLabel"><%- __("shapesDelete") %></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Keep</button>
        <button type="button" class="btn btn-danger" id="clearCanvasConfirm">Delete</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>

<script>
  $(function() {
    var canvases = {};
    var workingCanvas = "";
    var minScale = 0.5; // Minimum scale factor
    var maxScale = 3.0; // Maximum scale factor

    // load default canvas from local storage if it exists. create a new canvas if it doesn't.
    if (localStorage.getItem("shapes")) {
      canvases = JSON.parse(localStorage.getItem("shapes"));
      // load the default canvas
      if (canvases.default) {
        workingCanvas = "default";
        $("#canvas").html(canvases.default);
        $("#canvas .canvas-shape").each(function() {
          makeTouchable($(this));
        });
      }
      else {
        // load the first item in the object
        workingCanvas = Object.keys(canvases)[0];
        $("#canvas").html(canvases[workingCanvas]);
        $("#canvas .canvas-shape").each(function() {
          makeTouchable($(this));
        });
      }
    } else {
      canvases.default = "";
      workingCanvas = "default";
      localStorage.setItem("shapes", JSON.stringify(canvases));
    }

    // populate the load canvas dropdown
    for (let canvas in canvases) {
      $("#loadCanvas").append(`<option value="${canvas}">${canvas}</option>`);
    }

    // load canvas from local storage
    $("#loadCanvas").on("change", function() {
      workingCanvas = $(this).val();
      $("#canvas").html(canvases[workingCanvas]);
      $("#canvas .canvas-shape").each(function() {
        makeTouchable($(this));
      });
    });

    // save canvas to local storage
    $("#saveCanvas").on("click", function() {
      let name = prompt("<%- __("shapesName") %>");
      if (name) {
        workingCanvas = name;
        canvases["default"] = "";
        canvases[workingCanvas] = $("#canvas").html();
        localStorage.setItem("shapes", JSON.stringify(canvases));
        $("#loadCanvas").append(`<option value="${name}">${name}</option>`);
        $("#loadCanvas").val(name);
      }
    });


    let z = 1; // makes sure the last selected item is on top

    function setSelected(){
      $(".canvas-shape").removeClass("selected");
      $(this).addClass("selected");
      $(this).css("z-index", z++);
    }


// FUCKTIONS!!! ////////////////////////////////////////////////////////////////
    function matrixToDegrees(matrixString) {
      // Extract the matrix values
      const values = matrixString.match(/matrix\(([^)]+)\)/)[1].split(', ');
      const a = parseFloat(values[0]); // Corresponds to cos(θ)
      const b = parseFloat(values[1]); // Corresponds to sin(θ)
      const radians = Math.atan2(b, a);
      const degrees = radians * (180 / Math.PI);
      return degrees;
    }


    function touchToDegrees(initial, current) {
      // Normalize the initial and current values to be within the range [0, 360)
      const initialNormalized = (initial + 360) % 360;
      const currentNormalized = (current + 360) % 360;

      // Calculate the delta between the normalized current and initial angles
      let delta = currentNormalized - initialNormalized;

      // Adjust the delta to ensure it is between -180 and 180 degrees
      if (delta > 180) {
          delta -= 360;
      } else if (delta < -180) {
          delta += 360;
      }

      // Map delta to corresponding CSS value
      const degrees = delta / 2;
      return degrees;
    }

    var lastCSSRotation = 0;   // stored to add rotation to

    function makeTouchable(item){
      const mc = new Hammer(item[0]);

      let lastScale = 1;
      let startingTouchRotation = 0; // only used while touching

      mc.get('pinch').set({ enable: true });
      mc.get('rotate').set({ enable: false });

      mc.on("panmove", function(ev) {
        item.css({
          top: ev.center.y - item.height() / 2,
          left: ev.center.x - item.width() / 2,
        });
      });

      mc.on("panend", function(){ 
        canvases[workingCanvas] = $("#canvas").html();
        localStorage.setItem("shapes", JSON.stringify(canvases));
      });

      mc.on("pinchstart", function(ev) {
        startingTouchRotation = ev.rotation;
        lastCSSRotation = matrixToDegrees(item.css("transform") );
      });

      mc.on("pinchmove", function(ev) {
        let scale = Math.max(0.3, Math.min(lastScale * ev.scale, 3));
        let CSSRotation = touchToDegrees(startingTouchRotation, ev.rotation) + lastCSSRotation;
        CSSRotation = parseInt(CSSRotation);
        item.css({
          transform: `scale(${scale}) rotate(${CSSRotation}deg)`,
        });
      });

      mc.on("pinchend", function(ev) {
        lastScale *= ev.scale;
        canvases[workingCanvas] = $("#canvas").html();
        localStorage.setItem("shapes", JSON.stringify(canvases));
      });

    }


    // set all shapes to selected color
    $('#colorMenu .nav-item').on('click', function() {
      let color = $(this).text().toLowerCase();
      color = color === "pink" ? "hotpink" : color;
      $('#shapeMenu').addClass("rounded-3").css('border', `10px solid ${color}`);
      $('#shapeMenu .shape svg').each(function() {
        $(this).find('path, circle, rect, polygon').attr('fill', color);
      });
    });

    $("#canvas").on("mousedown touchstart", ".canvas-shape", setSelected);
    // Remove .selected only when clicking on the canvas outside any shapes.
    $("#canvas").on("mousedown", function(event) {
      if (event.target.id === "canvas") {
        $(".canvas-shape").removeClass("selected");
      }
    });

    $(document).on("keydown", function(event) {
      if (event.key === "Delete") {
        $(".selected").remove();
        canvases[workingCanvas] = $("#canvas").html();
        localStorage.setItem("shapes", JSON.stringify(canvases));
      }
    });

    $("#clearCanvas").on("click", function() {
      $("#clearCanvasModal").modal("show");
    });

    $("#clearCanvasConfirm").on("click", function() {
      if (workingCanvas === "default") {
        canvases.default = "";
      } else {
        delete canvases[workingCanvas];
        $(`#loadCanvas option[value="${workingCanvas}"]`).remove();
        workingCanvas = "default";
        $("#loadCanvas").val("default");
      }

      $("#canvas").empty();
      localStorage.setItem("shapes", JSON.stringify(canvases));
      z = 1;
      $("#clearCanvasModal").modal("hide");
    });

    var shapeMenu = new Hammer(document.getElementById('shapeMenu'));

    // Handle the panstart event
    shapeMenu.on('panstart', function(e) {
      // deselect
      $(".canvas-shape").removeClass("selected");
      // Get the shape that was touched
      var $shape = $(e.target).closest('.shape');

      // Clone the shape and add it to the canvas
      var $clone = $shape.clone().removeClass('shape').addClass('canvas-shape selected');
      $('#canvas').append($clone);
      // Add touch to pan and pinch to zoom functionality using hammer
      makeTouchable($clone);

      // Start dragging the clone
      $clone.css({
        position: 'absolute',
        left: e.center.x - $clone.width() / 2,
        top: e.center.y - $clone.height() / 2
      });
    });

    shapeMenu.on('panmove', function(e) {
      // Get the clone and move it
      var $clone = $('#canvas .canvas-shape.selected');
      $clone.css({
        left: e.center.x - $clone.width() / 2,
        top: e.center.y - $clone.height() / 2
      });
    });

    // Handle the panend event
    shapeMenu.on('panend', function() {
      // Save the canvas to local storage
      canvases[workingCanvas] = $("#canvas").html();
      localStorage.setItem("shapes", JSON.stringify(canvases));
    });
  });
</script>

<%- include('../foot'); -%>