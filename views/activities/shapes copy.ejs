<%- include('../head'); -%>

<style>
  .shape {
    height: 14%;
    position: relative;
  }

  .selected {
    filter: drop-shadow(0 0 0.5rem #0f0);
    border: solid 1px red;
  }

  .drag-handle {
    position: absolute;
    width: 30px;
    height: 15px;
    background-color: #0f0;
    bottom: 0px;
    left: 50%;
    transform: translateX(-50%);
    cursor: n-resize;
  }

  #colorMenu ul li,
  #tagMenuFiller {
    font-weight: bold;
    height: 9%;
  }

  #colorMenu ul li:hover {
    cursor: pointer;
  }
</style>


<div class="container-fluid g-0">
  <div class="row g-0" style="height:100vh;">
    <div id="colorMenu" class="col ps-1 pt-1 bg-light" style="max-width:100px;">
      <ul class="nav vert-tabs d-flex flex-column" style="height:100%;">
        <li class="nav-item rounded-start p-2" style="color:white;background-color:red;">RED</li>
        <li class="nav-item rounded-start p-2" style="background-color: orange;">ORANGE</li>
        <li class="nav-item rounded-start p-2" style="background-color: yellow;">YELLOW</li>
        <li class="nav-item rounded-start p-2" style="color:white;background-color: green;">GREEN</li>
        <li class="nav-item rounded-start p-2" style="color:white;background-color: blue;">BLUE</li>
        <li class="nav-item rounded-start p-2" style="color:white;background-color: purple;">PURPLE</li>
        <li class="nav-item rounded-start p-2" style="background-color: hotpink;">PINK</li>
        <li class="nav-item rounded-start p-2 border border-end-0" style="background-color: white">WHITE</li>
        <li class="nav-item rounded-start p-2" style="color:white;background-color: black;">BLACK</li>

        <div id="tagMenuFiller" class="p-1" style="position:relative;flex: auto">
          <div style="position:absolute;bottom:5px;">

            <!-- selecting will replace the canvas with the selected canvas -->
            <select id="loadCanvas" class="form-control border-primary mb-1">
            </select>

            <!-- this button will open a modal for entering a name to save as -->
            <button id="saveCanvas" class="btn btn-sm btn-success">
              <i class="material-icons">save_alt</i>
            </button>

            <!-- this button will open a modal to confirm clearing the canvas -->

            <button id="clearCanvas" class="btn btn-sm btn-danger">
              <i class="material-icons">delete</i>
            </button>
          </div>
        </div>

      </ul>
    </div>

    <div id="shapeMenu" class="col bg-light p-2" style="height:100%;max-width:100px;border:10px solid rgba(0,0,0,0);">
      <div class="shape" data-shape="circle">
        <svg class="circle-svg" width="100%" height="100%" viewBox="0 0 100 100" fill="none"
          xmlns="http://www.w3.org/2000/svg">
          <circle cx="50" cy="50" r="49" fill="purple" stroke="black" stroke-width="1" />
        </svg>
      </div>
      <div class="shape" data-shape="square">
        <svg class="square-svg" width="100%" height="100%" viewBox="0 0 100 100" fill="none"
          xmlns="http://www.w3.org/2000/svg">
          <rect x="0" y="0" width="100" height="100" fill="green" stroke="black" stroke-width="1" />
        </svg>
      </div>
      <div class="shape" data-shape="triangle">
        <svg class="triangle-svg" width="100%" height="100%" viewBox="0 0 100 87" fill="none"
          xmlns="http://www.w3.org/2000/svg">
          <polygon points="50,0 100,86 0,86" fill="hotpink" stroke="black" stroke-width="1" />
        </svg>
      </div>
      <div class="shape" data-shape="rectangle">
        <svg class="rectangle-svg" width="100%" height="100%" viewBox="0 0 100 60" fill="none"
          xmlns="http://www.w3.org/2000/svg">
          <rect x="0" y="0" width="100" height="60" fill="orange" stroke="black" stroke-width="1" />
        </svg>
      </div>
      <div class="shape" data-shape="diamond">
        <svg class="diamond-svg" width="100%" height="100%" viewBox="0 0 100 80" fill="none"
          xmlns="http://www.w3.org/2000/svg">
          <polygon points="50,0 100,40 50,80 0,40" fill="blue" stroke="black" stroke-width="1" />
        </svg>
      </div>
      <div class="shape" data-shape="star">
        <svg class="star-svg" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 90 85"
          fill="none">
          <polygon points="45,0 56,30 90,30 63,52 73,85 45,65 17,85 27,52 0,30 34,30" fill="yellow" stroke="black"
            stroke-width="1" />
        </svg>
      </div>
      <div class="shape" data-shape="heart">
        <svg class="heart-svg" width="100%" height="100%" viewBox="0 0 100 100" fill="none"
          xmlns="http://www.w3.org/2000/svg">
          <path
            d="m 29.703568,1.0010808 a 28.70313,31.396622 0 0 0 -20.2964316,9.1950552 28.70313,31.396622 0 0 0 -1e-7,44.401932 L 49.999999,99 90.592864,54.598068 a 28.70313,31.396622 0 0 0 0,-44.401932 28.70313,31.396622 0 0 0 -40.592864,0 28.70313,31.396622 0 0 0 -20.296432,-9.1950552 z"
            fill="red" stroke="black" stroke-width="1" />
        </svg>
      </div>
    </div>

    <!-- Canvas area for dragging and dropping shapes -->
    <div class="col" style="max-height:100vh;overflow:hidden;">
      <div id="canvas" class="border bg-med" style="height: 100%;overflow:hidden;"></div>
    </div>
  </div>
</div>

<div class="modal fade" id="clearCanvasModal" tabindex="-1" aria-labelledby="clearCanvasModalLabel"
  aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="clearCanvasModalLabel"><%- __("shapesDelete") %></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Keep</button>
        <button type="button" class="btn btn-danger" id="clearCanvasConfirm">Delete</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"></script>

<script>
$(function () {
  var canvases = {};
  var workingCanvas = "";
  var minScale = 0.5; // Minimum scale factor
  var maxScale = 3.0; // Maximum scale factor
  var isDraggingHandle = false; // Track if the drag handle is active

  // load default canvas from local storage if it exists. create a new canvas if it doesn't.
  if (localStorage.getItem("shapes")) {
    canvases = JSON.parse(localStorage.getItem("shapes"));
    // load the default canvas
    if (canvases.default) {
      workingCanvas = "default";
      $("#canvas").html(canvases.default);
      $("#canvas .canvas-shape").each(function () {
        makeTouchable($(this));
      });
    }
    else {
      $("#canvas").html("");
    }
  } else {
    canvases.default = "";
    workingCanvas = "default";
    localStorage.setItem("shapes", JSON.stringify(canvases));
  }


  // populate the load canvas dropdown
  for (let canvas in canvases) {
    $("#loadCanvas").append(`<option value="${canvas}">${canvas}</option>`);
  }

  // load canvas from local storage
  $("#loadCanvas").on("change", function () {
    workingCanvas = $(this).val();
    $("#canvas").html(canvases[workingCanvas]);
    $("#canvas .canvas-shape").each(function () {
      makeTouchable($(this));
    });
  });

  // save canvas to local storage
  $("#saveCanvas").on("click", function () {
    let name = prompt("<%- __("shapesName") %>");
    if (name) {
      workingCanvas = name;
      canvases["default"] = "";
      canvases[workingCanvas] = $("#canvas").html();
      localStorage.setItem("shapes", JSON.stringify(canvases));
      $("#loadCanvas").append(`<option value="${name}">${name}</option>`);
      $("#loadCanvas").val(name);
    }
  });


  let z = 1; // makes sure the last selected item is on top

  function setSelected() {
    $(".canvas-shape").removeClass("selected");
    $(this).addClass("selected");
    // Add drag handle for rectangle, triangle, and diamond
    if ($(this).attr("data-shape") === "rectangle" || $(this).attr("data-shape") === "triangle" || $(this).attr("data-shape") === "diamond") {
      $(this).append('<div class="drag-handle"></div>');
    }
    // remove drag handle from other shapes
    $(".canvas-shape").not(this).find(".drag-handle").remove();
    $(this).css("z-index", z++);
  }


  function touchToDegrees(initial, current) {
    let delta = current - initial;
    let degrees = (delta + 180) % 360 - 180;   // Normalize to [-180, 180] range
    return degrees;
  }


  function getRotationAngle(element) {
    var matrix = element.css('transform');
    if (matrix !== 'none') {
      var values = matrix.split('(')[1].split(')')[0].split(',');
      var a = values[0];
      var b = values[1];
      var angle = Math.round(Math.atan2(b, a) * (180 / Math.PI));
      return angle;
    }
    return 0;
  }


  function getScale(element) {
    var matrix = element.css('transform');
    if (matrix !== 'none') {
      var values = matrix.split('(')[1].split(')')[0].split(',');
      var a = values[0];
      var b = values[1];
      var scale = Math.sqrt(a * a + b * b);
      return scale;
    }
    return 1;
  }


  function makeTouchable(item) {
    const mc = new Hammer(item[0]);
    var scale = 1;                 // current scale of the shape
    var lastScale = 1;             // current scale of the shape
    var itemRotation = 0;          // current rotation of the shape
    var startingTouchRotation = 0; // reference for how much rotation to add
    var initialLeft = 0;           // initial left position of the shape
    var initialTop = 0;            // initial top position of the shape

    mc.get('pinch').set({ enable: true });
    mc.get('rotate').set({ enable: false });

    mc.on("panstart", function (e) {
      if (isDraggingHandle) return; // Disable Hammer.js events if the drag handle is active
      initialLeft = parseInt(item.css("left"), 10) || 0;
      initialTop = parseInt(item.css("top"), 10) || 0;
    });

    mc.on("panmove", function (e) {
      if (isDraggingHandle) return; // Disable Hammer.js events if the drag handle is active
      let dx = e.deltaX;
      let dy = e.deltaY;
      item.css({
        left: `${initialLeft + dx}px`,
        top: `${initialTop + dy}px`,
      });
    });

    mc.on("panend", function () {
      if (isDraggingHandle) return; // Disable Hammer.js events if the drag handle is active
      // If the shape is dragged off the canvas, remove it
      if (parseInt(item.css("left")) < 0) {
        item.remove();
      }
      if (workingCanvas === "default") {
        canvases.default = $("#canvas").html();
        localStorage.setItem("shapes", JSON.stringify(canvases));
      }
    });

    mc.on("pinchstart", function (ev) {
      startingTouchRotation = ev.rotation;
      itemRotation = getRotationAngle(item);
    });

    mc.on("pinchmove", function (ev) {
      let scale = Math.max(minScale, Math.min(lastScale * ev.scale, maxScale));
      let newItemRotation = touchToDegrees(startingTouchRotation, ev.rotation) + itemRotation;
      newItemRotation = parseInt(newItemRotation);
      item.css({
        transform: `scale(${scale}) rotate(${newItemRotation}deg)`,
      });
    });

    mc.on("pinchend", function (ev) {
      lastScale *= ev.scale;
      if (workingCanvas === "default") {
        canvases.default = $("#canvas").html();
        localStorage.setItem("shapes", JSON.stringify(canvases));
      }
    });

  }


  // set all shapes to selected color
  $('#colorMenu .nav-item').on('click', function () {
    let color = $(this).text().toLowerCase();
    color = color === "pink" ? "hotpink" : color;
    $('#shapeMenu').addClass("rounded-3").css('border', `10px solid ${color}`);
    $('#shapeMenu .shape svg').each(function () {
      $(this).find('path, circle, rect, polygon').attr('fill', color);
    });
  });


  $("#canvas").on("mousedown touchstart", ".canvas-shape", setSelected);
  // Remove .selected and drag handle only when clicking on the canvas outside any shapes.
  $("#canvas").on("mousedown", function (event) {
    if (event.target.id === "canvas") {
      $(".canvas-shape").removeClass("selected");
      $(".drag-handle").remove();
    }
  });


  $(document).on("keydown", function (event) {
    if (event.key === "Delete") {
      $(".selected").remove();
      if (workingCanvas === "default") {
        canvases.default = $("#canvas").html();
        localStorage.setItem("shapes", JSON.stringify(canvases));
      }
    }
  });


  $("#clearCanvas").on("click", function () {
    $("#clearCanvasModal").modal("show");
  });


  $("#clearCanvasConfirm").on("click", function () {
    if (workingCanvas === "default") {
      canvases.default = "";
    } else {
      delete canvases[workingCanvas];
      $(`#loadCanvas option[value="${workingCanvas}"]`).remove();
      workingCanvas = "default";
      $("#loadCanvas").val("default");
    }

    $("#canvas").empty();
    localStorage.setItem("shapes", JSON.stringify(canvases));
    z = 1;
    $("#clearCanvasModal").modal("hide");
  });


  // Handle dragging shapes from the shape menu to the canvas ////////////////////
  var shapeMenu = new Hammer(document.getElementById('shapeMenu'));

  shapeMenu.on('panstart', function (e) {
    $(".canvas-shape").removeClass("selected");
    var shape = $(e.target).closest('.shape');
    var clone = shape.clone().removeClass('shape').addClass('canvas-shape selected');
    $('#canvas').append(clone);
    makeTouchable(clone);

    clone.css({
      position: 'absolute',
      left: e.center.x - clone.width() / 2,
      top: e.center.y - clone.height() / 2
    });

    // Add drag handle for rectangle, triangle, and diamond
    if (clone.attr("data-shape") === "rectangle" || clone.attr("data-shape") === "triangle" || clone.attr("data-shape") === "diamond") {
      clone.append('<div class="drag-handle"></div>');
    }
    // remove drag handle from other shapes
    $(".canvas-shape").not(clone).find(".drag-handle").remove();
  });

  shapeMenu.on('panmove', function (e) {
    var clone = $('#canvas .canvas-shape.selected');

    clone.css({
      left: e.center.x - clone.width() / 2,
      top: e.center.y - clone.height() / 2,
      transform: `scale(1) rotate(0deg)`
    });
  });

  shapeMenu.on('panend', function () {
    if (workingCanvas === "default") {
      canvases.default = $("#canvas").html();
      localStorage.setItem("shapes", JSON.stringify(canvases));
    }
  });






  var isDraggingHandle = false;
  // Drag handle functionality
  $(document).on("mousedown touchstart", ".drag-handle", function (e) {
    isDraggingHandle = true;
    var item = $(this).closest(".canvas-shape");
    var svg = item.find('svg');
    var shape = svg.find('rect, polygon');
    var startTop = item.offset().top;
    var startLeft = item.offset().left;
    var startY = e.type === "mousedown" ? e.pageY : e.originalEvent.touches[0].pageY;
    var startX = e.type === "mousedown" ? e.pageX : e.originalEvent.touches[0].pageX;
    var startWidth = item.width();
    var startHeight = item.height();
    var rotationAngle = getRotationAngle(item);
    var scale = getScale(item);

    // Calculate the center of the shape taking into account the rotation and scale

    var centerX = startLeft + startWidth / 2 * scale;
    var centerY = startTop + startHeight / 2 * scale;







































    $(document).on("mousemove touchmove", function (e) {
      var currentY = e.type === "mousemove" ? e.pageY : e.originalEvent.touches[0].pageY;
      var currentX = e.type === "mousemove" ? e.pageX : e.originalEvent.touches[0].pageX;

      // Calculate the Euclidean distance from the center of the shape to the current touch point
      var deltaX = currentX - centerX;
      var deltaY = currentY - centerY;
      var newHeight = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

      // Calculate the angle between the center of the shape and the current touch point
      var angle = Math.atan2(deltaY, deltaX) * (180 / Math.PI) - 90;
      
      // Adjust the position of the shape so that the center remains the same
      var newCenterX = currentX - startWidth / 2 * scale;
      var newCenterY = currentY - newHeight / 2 * scale;

      item.css({
        height: `${newHeight}px`,
        transform: `rotate(${angle}deg)`,
        left: `${newCenterX}px`,
        top: `${newCenterY}px`,
      });


      svg.attr('viewBox', `0 0 ${startWidth} ${newHeight}`);
      shape.attr('height', newHeight);

      if (item.attr("data-shape") === "triangle") {
        shape.attr('points', `${startWidth / 2},0 ${startWidth},${newHeight} 0,${newHeight}`); // For triangle
      } else if (item.attr("data-shape") === "diamond") {
        shape.attr('points', `${startWidth / 2},0 ${startWidth},${newHeight / 2} ${startWidth / 2},${newHeight} 0,${newHeight / 2}`); // For diamond
      } else {
        shape.attr('height', newHeight);
        shape.attr('width', startWidth);
      }
    });



















































    $(document).on("mouseup touchend", function () {
      isDraggingHandle = false;
      $(document).off("mousemove touchmove");
      $(document).off("mouseup touchend");
    });
  });

});
</script>

<%- include('../foot'); -%>