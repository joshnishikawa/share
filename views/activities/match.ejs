<%- include('../head'); -%>
<style>
  .flip-back{
    font-weight: bold;
    -webkit-text-stroke: 1px black;
    color: slateblue
  }
</style>

<body>

  <div class="d-flex">
    <a href="/teachers" class="btn btn-sm btn-outline-secondary p-0">
      <i class="material-icons">close</i>
    </a>
  </div>

  <div style="min-height:100vh;user-select: none;">
    <div id="gridContainer">
      <div id="grid" class="d-flex flex-wrap"></div>
    </div>
  </div>

<script src="/vocab_decks.js"></script>
<script src="/script.js"></script>

<script>
$(function(){
  const NH_vocab = <%- JSON.stringify(NH_vocab) %>;
  
  var url = window.location.href;
  const searchParams = new URLSearchParams(url.substring(url.indexOf('?')));
  const setName = searchParams.get('setName');
  const deckType = searchParams.get('deckType');
  const backs = searchParams.get('backs');

  let max_num_of_cards = {
    'colors': 20,
    'colorsNumbers': 40,
    'colorsShapes': 18,
    'animals': 20,
    'objects': 20,
  }

  var deck = [];
  var list = [];
  var backContent = [];
  var backClass = [];

  // We need an array of objects. Objects have info and arrays can be shuffled.
  switch (deckType){
    case 'text':
      list = setName == "lower_case_mix" && backs == "animals" ? vocab_decks["lower_case_mix"].slice(0, 10) 
               : setName == "lower_case_mix" && backs == "objects" ? vocab_decks["lower_case_mix"].slice(10, 20)
               : vocab_decks[setName];
      for (let i of list){
        deck.push({name: i, image: `<div style="font-size:3rem;position:absolute;z-index:-1;">${i}</div>`});
      }
      break;

    case 'NH':
      list = JSON.parse(setName); // {"vocab word": "file name", "other word": "other file name"}
      for (let i in list){
        deck.push({name: i, image: `<img src="/image/gif/${list[i]}" alt="${i}" 
                                         style="position:absolute;margin: auto;
                                         left: 0;right: 0;text-align: center;
                                         max-width:90%;max-height:90%">`});
      }
      break;

    case 'images':
      list = JSON.parse(setName);
      for (let i of list){
        deck.push({name: i.replace(/_/g, ' '), image: `<img src="/image/svg/${i}.svg" alt="${i}" 
                                          style="position:absolute;margin: auto;
                                          left: 0;right: 0;text-align: center;
                                          max-width:90%;max-height:90%">`});
      }
      break;

    default:
      console.log('whu?');
  }


  // SET UP THE DECK /////////////////////////////////////////////////////////////
  // Shuffle first so that cards left out are random (unless doing letters).
  if ( setName != "lower_case_mix" ) FYshuffle(deck);
  
  // FIRST whittle down the deck to half the number of card backs available.
  while (deck.length * 2 > max_num_of_cards[backs]) deck.pop();

  // LAST whittle down the deck to the number of items that fit into a grid.
  let {length, colspan, rowheight} = getGrid({length: deck.length * 2, even: true});
  deck = deck.slice(0, length / 2);

  // Then double the deck to make pairs.
  deck = deck.concat( deck );


  // THEN SET UP THE CARD BACKS //////////////////////////////////////////////////
  switch(backs){
    case 'colors':
      backClass = vocab_decks.colors.slice(0, deck.length);
      FYshuffle(backClass);
      break;

    case 'numbers':
      backContent = vocab_decks['0~100'].slice(1, deck.length+1);
      FYshuffle(backContent);
      break;

    case 'colorsNumbers':
      let nums = [];
      for (let i = 0; i < deck.length / 2; i++){
        nums.push(i.toString());
        backClass.push(vocab_decks.colors[i] + 'Text alert-primary'); //use .redText class instead of .red
        backClass.push(vocab_decks.colors[i] + 'Text alert-primary');
      }

      let nums2 = nums.slice(0); // Do this way because FYshuffle shuffles in place.
      FYshuffle(nums);
      FYshuffle(nums2);

      // This prevents dupes that may occur when half the deck is an odd number.
      // i.e. ["r", "r", "g", "g", "b", "b"]
      //      [ 3,   1,   2,   2,   3,   1 ] would produce two green "2"s
      if (nums[nums.length-1] == nums2[0]) nums2.pop( nums2.unshift() );

      backContent = nums.concat(nums2);
      parallelShuffle(backClass, backContent);
      break;

    case 'colorsShapes':
      let shapes = [];
      for (let i = 0; i < deck.length / 2; i++){
        shapes.push(vocab_decks.shapes[i]);
        backClass.push(vocab_decks.colors[i] + 'Text alert-primary'); //use .redText class instead of .red
        backClass.push(vocab_decks.colors[i] + 'Text alert-primary');
      }

      let shapes2 = shapes.slice(0); // Do this way because FYshuffle shuffles in place.
      FYshuffle(shapes);
      FYshuffle(shapes2);

      // This prevents dupes that may occur when half the length of the deck is an odd number.
      // i.e. ["r", "r", "g", "g", "b", "b"]
      //      [ 3,   1,   2,   2,   3,   1 ] would produce two green "2"s
      if (shapes[shapes.length-1] == shapes2[0]) {
        shapes2.pop(shapes2.unshift());
      }

      backContent = shapes.concat(shapes2);
      parallelShuffle(backClass, backContent);
      break;

    case 'animals':
      for (let i = 0; i < deck.length; i++){
        backContent.push(`<img class="img-flash" 
                               src="/image/svg/${vocab_decks.animals[i]}.svg" 
                               alt="${vocab_decks.animals[i]}">`);
        backClass.push('alert-primary');
      }

      if (setName != 'lower_case_mix') FYshuffle(backContent);
      break;

    case 'objects':
      for (let i = 0; i < deck.length; i++){
        backContent.push(`<img class="img-flash" 
                               src="/image/svg/${vocab_decks.objects[i]}.svg" 
                               alt="${vocab_decks.animals[i]}">`);
        backClass.push('alert-primary');
      }

      if (setName != "lower_case_mix") FYshuffle(backContent);
      break;

    default:
      backContent = FYshuffle( vocab_decks['0~100'].slice(1, deck.length+1) );
  }


  // letters need to be shuffled in parallel with the objects they represent
  if ( setName == "lower_case_mix" ) {
    parallelShuffle(deck, backContent);
    FYshuffle(backClass);
  }
  else {
    FYshuffle(deck);
    // In other cases, the backContent is already shuffled
  }

  // NOW BUILD THE GRID ////////////////////////////////////////////////////////
  for (let i = 0; i < deck.length; i++){
    $("#grid").append(
     `<div class="col-${colspan} vocab p-0" style="height:${rowheight}vh;">
        <div data-value="${deck[i].name}" class="flip m-3" style="height:80%;">
          <div class="flip-card shadow">

            <div class="flip-front bg-white rounded border">
              ${deck[i].image}
              </div>
            <div class="flip-back rounded border border-primary text-center ${backClass[i]}"
                 style="font-size:${Math.floor(rowheight * 0.8)}vh;">
              ${backContent[i] ? backContent[i] : ''}
            </div>
          </div>
        </div>
      </div>`);
  }


  var pause = false;

  $(".flip").on('click', function(){
    if (pause) return;

    $(this).toggleClass('flipped');

    if ($('.flip.flipped').length == 2){
      if ($('.flip.flipped').first().data('value') == $('.flip.flipped').last().data('value')){
        $('.flip.flipped').removeClass('flip').off('click');
      }
      else {
        pause = true;
        setTimeout(()=>{ // this doesn't work unless there's a delay
          $(document).on('click',()=>{
            $('.flip.flipped').removeClass('flipped');
            pause = false;
            $(document).off('click');
          });
        }, 100);
      }
    }
  });

});
</script>

<%- include('../foot'); -%><!-- FOOT INCLUDES SCRIPTS AND </body> -->
