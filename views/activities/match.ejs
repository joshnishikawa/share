<%- include('../head'); -%>
<style>
  .container {
    container-type: size;
  }

  .flip-back{
    font-weight: bold;
    -webkit-text-stroke: 1px black;
  }
  .flip-front img{
    position:absolute;
    margin: auto;
    left: 0;
    right: 0;
    text-align:center;
    max-width:90%;
    max-height:90%;
  }

</style>

<body>
<div class="d-flex">

  <button class="btn btn-sm btn-outline-secondary p-0 me-3" data-bs-toggle="modal" data-bs-target="#match_modal">
    <i class="material-icons">info</i>
  </button>

  <div class="form-check mx-3">
    <input type="checkbox" id="showtext" class="form-check-input">
    <label for="showtext" class="form-check-label">Match Image with Text</label>
  </div>
</div> 

<div class="pt-3" style="min-height:100vh;user-select: none;">
  <div id="grid" class="d-flex flex-wrap"></div>
</div>

<%- include ("../modals/modal_match.ejs") %>


<script>
  const deckType = '<%- deckType %>';

  $(async function(){
  var text_decks;
  await fetch('/javascripts/text_decks.json')
        .then(response => response.json())
        .then(data => {
          text_decks = data;
        });

  var deck = <%- JSON.stringify(deck) %>;
  const params = <%- params %>;
  var deckName = params.deckName;
  var backs = params.backs;

  if (deckName == "lower_case_mix" && backs == "animals") deck = deck.slice(0, 10);
  else if (deckName == "lower_case_mix" && backs == "objects") deck = deck.slice(10, 20);
  console.log(deck);
  document.title = `Match ${backs} ${deckType}`;

  let max_num_of_cards = {
    'colors': 20,
    'colorsNumbers': 40,
    'colorsShapes': 18,
    'animals': 20,
    'objects': 20,
  }

  var backContent = [];
  var backClass = [];

  // SET UP THE DECK ///////////////////////////////////////////////////////////
  // Shuffle first so that cards left out are random (unless doing letters).
  if ( deckName != "lower_case_mix" ) FYshuffle(deck);
  
  // FIRST whittle down the deck to half the number of card backs available.
  while (deck.length * 2 > max_num_of_cards[backs]) deck.pop();

  // LAST whittle down the deck to the number of items that fit into a grid.
  let {length, colspan, rowheight} = getGrid({length: deck.length * 2, even: true});
  deck = deck.slice(0, length / 2);

  let numofitems = deck.length;
  for (let i = 0; i < numofitems; i++){
    deck[i]["type"] = ""; // half of cards wont have the class that toggles text
    deck.push({"word": deck[i].word, "image": deck[i].image, "type": "text"});
  }


  // THEN SET UP THE CARD BACKS //////////////////////////////////////////////////
  switch(backs){
    case 'colors':
      backClass = text_decks.colors.slice(0, deck.length);
      FYshuffle(backClass);
      break;

    case 'numbers':
      for (let i = 1; i <= deck.length; i++){
        backContent.push( i.toString() );
        backClass.push('alert-primary');
      }
      FYshuffle(backContent);
      break;

    case 'colorsNumbers':
      let nums = [];
      for (let i = 0; i < deck.length / 2; i++){
        nums.push(i.toString());
        backClass.push(text_decks.colors[i] + 'Text alert-primary'); //use .redText class instead of .red
        backClass.push(text_decks.colors[i] + 'Text alert-primary');
      }

      let nums2 = nums.slice(); // Do this way because FYshuffle shuffles in place.
      FYshuffle(nums);
      FYshuffle(nums2);
      // This prevents dupes that may occur when half the deck is an odd number.
      // i.e. ["r", "r", "g", "g", "b", "b"]
      //      [ 3,   1,   2,   2,   3,   1 ] would produce two green "2"s
      if (nums[nums.length-1] == nums2[0]) nums2.unshift( nums2.pop() );

      backContent = nums.concat(nums2);
      parallelShuffle(backClass, backContent);
      break;

    case 'colorsShapes':
      let shapes = [];
      for (let i = 0; i < deck.length / 2; i++){
        shapes.push(text_decks.shapes[i]);
        backClass.push(text_decks.colors[i] + 'Text alert-primary'); //use .redText class instead of .red
        backClass.push(text_decks.colors[i] + 'Text alert-primary');
      }

      let shapes2 = shapes.slice(0); // Do this way because FYshuffle shuffles in place.
      FYshuffle(shapes);
      FYshuffle(shapes2);

      // This prevents dupes that may occur when half the length of the deck is an odd number.
      // i.e. ["r", "r", "g", "g", "b", "b"]
      //      [ 3,   1,   2,   2,   3,   1 ] would produce two green "2"s
      if (shapes[shapes.length-1] == shapes2[0]) {
        shapes2.pop(shapes2.unshift());
      }

      backContent = shapes.concat(shapes2);
      parallelShuffle(backClass, backContent);
      break;

    case 'capital':
      let capital = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
                     "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",
                     "U", "V", "W", "X", "Y", "Z"];
      for (let i of capital){
        backContent.push( i );
        backClass.push('alert-primary');
      }
      FYshuffle(backContent);
      break;

    case 'lowerCase':
      let lowerCase = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
                       "k", "l", "m", "n", "o", "p", "q", "r", "s", "t",
                       "u", "v", "w", "x", "y", "z"];
      for (let i of lowerCase){
        backContent.push( i );
        backClass.push('alert-primary');
      }
      FYshuffle(backContent);
      break;

    case 'animals':
      for (let i = 0; i < deck.length; i++){
        backContent.push(`<img style="max-width:70%;max-height:70%;" 
                               src="/image/svg/${text_decks.animals[i]}.svg" 
                               alt="${text_decks.animals[i]}"
                               onerror="altOnly(this)">`);
        backClass.push('alert-primary');
      }

      if (deckName != 'lower_case_mix') FYshuffle(backContent);
      break;

    case 'objects':
      for (let i = 0; i < deck.length; i++){
        backContent.push(`<img style="max-width:70%;max-height:70%;" 
                               src="/image/svg/${text_decks.objects[i]}.svg" 
                               alt="${text_decks.objects[i]}"
                               onerror="altOnly(this)">`);
        backClass.push('alert-primary');
      }

      if (deckName != 'lower_case_mix') FYshuffle(backContent);
      break;

    default:
      for (let i = 1; i <= deck.length; i++){
        backContent.push( i.toString() );
        backClass.push('alert-primary');
      }
      FYshuffle( backContent );
  }


  // need to shuffle letters in parallel with the animals/objects they represent
  if ( deckName == "lower_case_mix" ) {
    parallelShuffle(deck, backContent);
    FYshuffle(backClass);
  }
  else {
    FYshuffle(deck);
    // In other cases, the backContent is already shuffled
  }

  // NOW BUILD THE GRID ////////////////////////////////////////////////////////
  for (let i = 0; i < deck.length; i++){
    $("#grid").append(
     `<div class="col-${colspan} vocab p-0" style="height:${rowheight}vh;">
        <div data-value="${deck[i].word}" class="container flip" style="height:80%;">
          <div class="flip-card shadow">

            <div class="${deck[i].type} flip-front bg-white rounded border UD">
              <img src="${deck[i].image}" alt="${deck[i].word}" class="rounded" 
                   style="max-width:90%;max-height:90%;">
              <div style="display:none;font-size:30cqh;">${deck[i].word}</div>
            </div>
            <div class="flip-back rounded border border-primary text-center ${backClass[i]}"
                 style="font-size:${Math.floor(rowheight * 0.8)}vh;">
              ${backContent[i] ? backContent[i] : ''}
            </div>
          </div>
        </div>
      </div>`);
  }
  // add onerror handler to all flip-front images
  $(".flip-front img").on('error', function(){
    altOnly(this);
  });


  $(".flip").on('click', function(){
    $(this).toggleClass('flipped').promise().done(function(){
      if ($('.flip.flipped').length == 2){
        if ($('.flip.flipped').first().data('value') == $('.flip.flipped').last().data('value')){
          $('.flip.flipped').removeClass('flip picked').off('click');
        }
        else {
          $('.picked').removeClass('picked');
          setTimeout(function(){ // wait or this will trigger on the same click
            $(document).on('click',()=>{
              $('.flip.flipped').removeClass('flipped');
              $(document).off('click');
            });
          }, 100);
        }
      }
    });
  });


  $("#showtext").on('change', function(){
    if ($(this).is(':checked')){
      // hide all images inside divs with .text class
      $(".text img").hide();
      $(".text div").show();
    }
    else {
      // show all images inside divs with .text class
      $(".text img").show();
      $(".text div").hide();
    }
  });


  var slash = false;
  $(document).on('keydown', function(e){
    if (e.key == "/"){
      e.preventDefault();
      if (slash) return;

      slash = true;
      let len = $(".flip.flipped").length;
      if (len == 1){
        $(".flip.flipped").addClass('picked');
        let val = $(".flip.flipped").data('value');
        $(`.flip[data-value="${val}"]:not(.picked)`).addClass('flipped');
      }
      else if (len == 0){
        $(".flip:not(.flipped)").addClass('flipped')
      }
      else{
        $(document).off('click'); // saves you having to click next card twice
      }
    }
  });

  $(document).on('keyup', function(e){
    if (e.key == "/"){
      let len = $(".picked").length;
      console.log(len + " picked");
      if (len == 1){
        $(".flip.flipped:not(.picked)").removeClass('flipped');
      }
      else {
        $(".flip.flipped").removeClass('flipped');
      }
      slash = false;
    }
  });

});
</script>

<%- include('../foot'); -%><!-- FOOT INCLUDES SCRIPTS AND </body> -->
