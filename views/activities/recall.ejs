<%- include('../head'); -%>

<style>
  #grid img, #display img{
    position:absolute;
    margin: auto;
    left: 0;
    right: 0;
    text-align: center;
    max-width:90%;
    max-height:90%;
  }

</style>

<body>
  <div class="d-flex">
    <a href="/teachers" class="btn btn-sm btn-outline-secondary py-0 me-1">
      <i class="material-icons">close</i>
    </a>

    <button class="btn btn-sm btn-outline-secondary p-0 me-1" data-bs-toggle="modal" data-bs-target="#recall_modal">
      <i class="material-icons">info</i>
    </button>

    <div id="numselect" class="form-group me-1">

      <div class="d-flex rounded-3 border border-secondary">
        <label for="numCards" class="form-label px-1 mt-1 mb-0">Hide</label>
        <input id="numCards" type="number" class="form-control form-control-sm border-0" 
              min="1" style="width:3rem;" aria-label="number of cards">
      </div>
    </div>
    
    <button id="start" class="btn btn-sm btn-outline-success py-0">
      <i class="material-icons">play_arrow</i>
    </button>
    <button id="replay" class="btn btn-sm btn-outline-success py-0 me-1" style="display:none;">
      <i class="material-icons">replay</i>
    </button>

    <div class="d-inline-block">
      <input id="searchInput" class="form-control form-control-sm" type="text" placeholder="Search" aria-label="Search" style="display:none;">
    </div>
  </div>


  <div style="min-height:100vh;">
    <div id="display" class="col d-flex flex-wrap justify-content-center" style="display:none;"></div>
    <div id="gridContainer" style="display:none;">
      <div id="grid" class="d-flex flex-wrap"></div>
    </div>
  </div>

<%- include ("../modals/modal_recall.ejs") %>


<script>
$(function(){
  var url = window.location.href;
  const searchParams = new URLSearchParams(url.substring(url.indexOf('?')));
  const setName = searchParams.get('setName');
  const deckType = searchParams.get('deckType');
  var deck = getDeck({setName, deckType});
  
  deck = FYshuffle(deck); // Shuffle first so that cards left out are random.
  let {length, colspan, rowheight} = getGrid({length: deck.length, even: false});
  deck = deck.slice(0, length); // Slice the deck to the correct length.
  let fontsize = Math.floor( deck.length / 6 );

  $("#numCards").val(deck.length);
  $("#numCards").attr('max', deck.length);

// PREPARE THE DISPLAY /////////////////////////////////////////////////////////
  for (let i of deck){
    $('#display').append(
       `<div class="rounded-3 px-3 bg-white border display-1">
          <div style="font-size:3rem;">
            ${i.name.split('(')[0].replace('_', " ")}
            <div style="${deckType == "text" ? '' : "height:8rem;width:8rem;"} position:relative;">
              ${ deckType == 'text' ? '' : i.image}
            </div>
          </div>
        </div>`);
  }
  $("#display").show();



// PREPARE THE GRID ////////////////////////////////////////////////////////////
  play = () => {
    $("#grid").empty();
    deck = FYshuffle(deck);

    for (let i of deck){
      $("#grid").append(
      `<div id="${i.name.replace(/[ ()']/g, '_')}" class="col-${colspan} vocab p-0" style="height:${rowheight}vh;">
          <div class="flip border-primary border-5 rounded-3 m-3" style="height:80%;">
            <div class="flip-card shadow">
              <div class="flip-front bg-white rounded border display-1">
                ${i.image}
              </div>
              <div class="flip-back rounded border border-primary text-center alert-primary display-${fontsize}">
                &nbsp;
              </div>
            </div>
          </div>
        </div>`);
    }

    $("#display").empty();
    $("#start").hide();
    $("#replay").show();
    $("#searchInput").show().focus();

    let numCards = deck.length - $("#numCards").val(); // Hide (not show) this many cards.
    let cards = $(".vocab");
    let flipped = [];
    for (let i = 0; i < numCards; i++){
      let rand = Math.floor(Math.random() * cards.length);
      flipped.push(cards[rand]);
      cards.splice(rand, 1);
    }
    for (let i of flipped){
      $(i).addClass('flipped').removeClass('flip').off('mousedown');
    }

    $(".flip").on('dblclick', function(){
      $(this).addClass('flipped').removeClass('flip').off('mousedown');
    });

    $("#gridContainer").show();
  }


  $("#start").on('click', play);
  $("#replay").on('click', play);


  $("#searchInput").on('keyup', function(e){
    if (e.key == "Enter"){
      $(".flip.border")
        .addClass('flipped')
        .removeClass('flip')
        .off('mousedown')
        .promise().done(()=>{
        $(".border-5").removeClass('border');
      });
      $("#searchInput").val("");
    }
    else{
      $(".flip").removeClass('border');
      $(".flip-back").html('&nbsp;');

      let input = $(this).val();
      if (input == ""){return;}
      let matches = deck.filter((v)=>{return v.name.startsWith(input);});
      for (let i of matches){
        let id = i.name.replace(/[ ()']/g, '_');
        $(`#${id} > .flip`).addClass('border');
        $(`#${id} > .flip > .flip-card > .flip-back`).html(input);
      }
    }
  });


  let slash = false;
  $(document).on('keydown', function(e){
    if (e.key == "/"){
      e.preventDefault();
      if (slash) return;

      slash = true;
      if ($(".flip.border").length > 0){
        $(".flip.border").addClass('flipped');
      }
      else{
        $(".flip:not(.flipped)").addClass('flipped')
      }
    }
  });

  $(document).on('keyup', function(e){
    if (e.key == "/"){
      $(".flip").removeClass('flipped');
      slash = false;
    }
  });


  $(".flip").on('mousedown', function(){
    $(this).toggleClass('flipped').on('mouseup', function(){
      $(this).removeClass('flipped').off('mouseup');
    });
  });


  $("#exit").on('click', ()=>{
    window.location.replace('/');
  });

});

</script>

<%- include('../foot'); -%><!-- FOOT INCLUDES SCRIPTS AND </body> -->
