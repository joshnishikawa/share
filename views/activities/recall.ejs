<%- include('../head'); -%>

<style>
  #grid img{
    position:absolute;
    margin: auto;
    left: 0;
    right: 0;
    text-align: center;
    max-width:90%;
    max-height:90%;
  }

  #display img{
    position:absolute;
    margin: auto;
    left: 0;
    right: 0;
    text-align: center;
    max-width:90%;
    max-height:90%;
  }

</style>

<body>

  <div class="d-flex">
    <a href="/teachers" class="btn btn-sm btn-outline-secondary p-0">
      <i class="material-icons">close</i>
    </a>

    <div id="numselect" class="form-group d-flex">
      <div class="d-flex mx-1 rounded-3 border border-info">
        <label for="numCards" class="form-label mx-1 mt-1 mb-0">Hide</label>
        <input id="numCards" type="number" class="form-control form-control-sm border-0 pe-0" min="1" style="width:3rem;" aria-label="number of cards">
      </div>
      <div id="start" class="btn btn-sm btn-outline-info">START</div>
    </div>

    <input id="searchInput" class="form-control form-control-sm" type="text" placeholder="Search" aria-label="Search" style="display:none;">
  </div>

  <div style="min-height:100vh;">
    <div id="display" class="col d-flex flex-wrap justify-content-center" style="display:none;"></div>
    <div id="gridContainer" style="display:none;">
      <div id="grid" class="d-flex flex-wrap"></div>
    </div>
  </div>

<script src="/vocab_decks.js"></script>
<script src="/script.js"></script>

<script>
$(function(){
  var url = window.location.href;
  const searchParams = new URLSearchParams(url.substring(url.indexOf('?')));
  const setName = searchParams.get('setName');
  const deckType = searchParams.get('deckType');
  var deck = [];
  var list = [];

  // We need an array of objects. Objects have info and arrays can be shuffled.
  switch (deckType){
    case 'text':
      list = vocab_decks[setName];
      for (let i of list){
        deck.push({name: i, image: `<div style="font-size:3rem;">${i}</div>`});
      }
      break;
    case 'NH':
      list = JSON.parse(setName); // {"vocab word": "file name", "other word": "other file name"}
      for (let i in list){
        deck.push({name: i, image: `<img src="/image/gif/${list[i]}" alt="${i}">`});
      }
      break;
    case 'images':
      list = JSON.parse(setName);
      for (let i of list){
        deck.push({name: i.replace(/_/g, ' '), 
                   image: `<img src="/image/svg/${i}.svg" alt="${i}">`});
      }
      break;
    default:
      throw 'ERROR: deckType not recognized.';
  }

  deck = FYshuffle(deck); // Shuffle first so that cards left out are random.
  let {length, colspan, rowheight} = getGrid({length: deck.length, even: false});
  deck = deck.slice(0, length); // Slice the deck to the correct length.

  $("#numCards").val(deck.length);
  $("#numCards").attr('max', deck.length);

// PREPARE THE DISPLAY /////////////////////////////////////////////////////////
for (let i of deck){
    $('#display').append(
       `<div class="rounded-3 px-3 bg-white border">
          <div style="font-size:3rem;">
            ${i.name.split('(')[0].replace('_', " ")}
            <div style="height:8rem;width:8rem;position:relative;">
              ${i.image}
            </div>
          </div>
        </div>`);
  }
  $("#display").show();

  deck = FYshuffle(deck);

  for (let i of deck){
    $("#grid").append(
     `<div id="${i.name.replace(/ /g, '_')}" class="col-${colspan} vocab p-0" style="height:${rowheight}vh;">
        <div class="flip m-3" style="height:80%;">
          <div class="flip-card shadow">
            <div class="flip-front bg-white rounded border"">
              ${i.image}
            </div>
            <div class="flip-back rounded border border-primary text-center alert-primary">
              &nbsp;
            </div>
          </div>
        </div>
      </div>`);
  }


  $("#start").on('click', ()=>{
    $("#display").empty();
    $("#numselect").removeClass('d-flex').hide();
    $("#searchInput").show().focus();

    let numCards = deck.length - $("#numCards").val(); // Hide (not show) this many cards.
    let cards = $(".vocab");
    let flipped = [];
    for (let i = 0; i < numCards; i++){
      let rand = Math.floor(Math.random() * cards.length);
      flipped.push(cards[rand]);
      cards.splice(rand, 1);
    }
    for (let i of flipped){
      $(i).addClass('flipped').removeClass('flip').off('mousedown');
    }

    $("#gridContainer").show();
  });


  $("#searchInput").on('keyup', function(e){
    if (e.key == "Enter"){
      $(".vocab.bg-warning > .flip")
        .addClass('flipped')
        .removeClass('flip')
        .off('mousedown')
        .promise().done(()=>{
        $(".vocab.bg-warning").removeClass('bg-warning');
      });
      $("#searchInput").val("");
    }
    else{
      $(".vocab").removeClass('bg-warning');
      let input = $(this).val();
      if (input == ""){return;}
      let matches = deck.filter((v)=>{return v.name.startsWith(input);});
      for (let i of matches){
        $(`#${i.name.replace(/ /g, '_')}`).addClass('bg-warning');
      }
    }
  });

  $(document).on('keydown', function(e){
    if (e.key == "/"){
      e.preventDefault();
      $(".flip:not(.flipped)").addClass('flipped');
      $(document).on('keyup', function(e){
        if (e.key == "/"){
          $(".flip.flipped").removeClass('flipped');
          $(document).off('keyup');
        }
      });
    }
  });

  $(".flip").on('mousedown', function(){
    $(this).toggleClass('flipped').on('mouseup', function(){
      $(this).removeClass('flipped').off('mouseup');
    });
  });


  $("#exit").on('click', ()=>{
    window.location.replace('/');
  });

});

</script>

<%- include('../foot'); -%><!-- FOOT INCLUDES SCRIPTS AND </body> -->
