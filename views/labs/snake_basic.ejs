<%- include('../head.ejs') %>
<div class="container text-center mt-5">
  <canvas id="gameCanvas" width="600" height="450" class="alert-success mx-auto"></canvas>
</div>


<script>
  var canvas = document.getElementById('gameCanvas');
  var context = canvas.getContext('2d');
  var gridSize = 150;
  var positions = [
    {x: 0, y: 0 }, {x: 0, y: 150}, { x: 0, y: 300 },
    {x: 150, y: 0}, { x: 150, y: 150 }, { x: 150, y: 300 },
    {x: 300, y: 0}, { x: 300, y: 150 }, { x: 300, y: 300 },
    {x: 450, y: 0}, { x: 450, y: 150 }, { x: 450, y: 300 }
  ];

  var snake = [{ x: 150, y: 150 }];
  var direction = '';
  var food = { x: 300, y: 300 };


  function getRandomGridPosition() {
    let availablePositions = [];
    let isOnSnake;

    // get positions that are not on the snake
    for (let i = 0; i < positions.length; i++) {
      isOnSnake = false;
      for (let j = 0; j < snake.length; j++) {
        if (positions[i].x === snake[j].x && positions[i].y === snake[j].y) {
          isOnSnake = true;
          break;
        }
      }
      if (!isOnSnake) availablePositions.push(positions[i]);
    }
    // console.log(availablePositions);
    let position = availablePositions[Math.floor(Math.random() * availablePositions.length)];
    // console.log(position);
    return position;
  }


  function drawModule() {
    return {
      bodySnake: function(x, y) { // TODO: x and y should indicate direction when passed to this function and other values should be adjusted accordingly 
        context.fillStyle = 'green';
        context.fillRect(x+10, y+10, gridSize-20, gridSize-20);
      },
      headSnake: function(x, y) {
        context.fillStyle = 'black';
        context.fillRect(x+10, y+10, gridSize-20, gridSize-20);
      },
      pizza: function(x, y) {
        context.fillStyle = 'red';
        context.fillRect(x+20, y+20, gridSize-40, gridSize-40);
      },
      init: function() {
        $(document).off('keydown').on('keydown', function(event) {
          if (event.key === 'ArrowUp') direction = 'up';
          if (event.key === 'ArrowDown') direction = 'down';
          if (event.key === 'ArrowLeft') direction = 'left';
          if (event.key === 'ArrowRight') direction = 'right';
          if (event.key === 'q') reset();
          gameLoop();
        });
        // setInterval(gameLoop, 1000 / 10); // to auto-move the snake
      }
    };
  }


  function reset() {
    snake = [{ x: 150, y: 150 }];
    direction = '';
    food = { x: 300, y: 300 };
    gameLoop();
  }


  function gameLoop() {
    context.clearRect(0, 0, canvas.width, canvas.height);
    let hitself = false;
    let message = '';

    let head = { x: snake[0].x, y: snake[0].y };
    if (direction === 'up') head.y = snake[0].y - gridSize;
    if (direction === 'down') head.y = snake[0].y + gridSize;
    if (direction === 'left') head.x = snake[0].x - gridSize;
    if (direction === 'right') head.x = snake[0].x + gridSize;

    snake.unshift(head);
    let tail = snake.pop(); // after adding the head, remove the tail. Put it back if the snake

    for (let i = 1; i < snake.length; i++) {
      if (head.x === snake[i].x && head.y === snake[i].y) {
        hitself = true;
        break;
      }
    }

    if (   head.x < 0 
        || head.x >= canvas.width 
        || head.y < 0 
        || head.y >= canvas.height){ // snake hits wall = dead
      message = 'You died!';
    }
    else if (head.x === food.x && head.y === food.y ){ // yummy
      snake.push(tail);
      food = getRandomGridPosition();
      if (!food){
        snake.unshift(head);
        message = 'You won!';
      }
    }
    else if (hitself){ // snake hits self = ignore its stupidity
      snake.shift();
      snake.push(tail);
    }

    if (food) drawModule().pizza(food.x, food.y);
    for (var i = 1; i < snake.length; i++) {
      drawModule().bodySnake(snake[i].x, snake[i].y);
    }
    drawModule().headSnake(snake[0].x, snake[0].y);

    if (message) {
      // drawModule().headSnake(snake[0].x, snake[0].y);
      setTimeout(function() { // delay the alert so that the snake is drawn before the alert pops up
          alert(message);
          reset();
      }, 100);
    }

  }

  drawModule().init();
  gameLoop();

</script>
<%- include('../foot.ejs') %>